
HTDKN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800561c  0800561c  0000661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b10  08005b10  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b18  08005b18  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b18  08005b18  00006b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000005c  08005b7c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005b7c  00007388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4f5  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206b  00000000  00000000  00015581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000175f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa7  00000000  00000000  00018390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c85  00000000  00000000  00018e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104e0  00000000  00000000  00030abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3f9  00000000  00000000  00040f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  000db3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000df2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005604 	.word	0x08005604

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08005604 	.word	0x08005604

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Calculate_CRC16>:


#include "Frame.h"


uint16_t Calculate_CRC16(uint8_t *data, uint16_t length) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80004d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	81bb      	strh	r3, [r7, #12]
 80004de:	e025      	b.n	800052c <Calculate_CRC16+0x64>
        crc ^= (uint16_t)(data[i] << 8);  // Sử dụng data[i] cho rõ ràng
 80004e0:	89bb      	ldrh	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	4053      	eors	r3, r2
 80004f0:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80004f2:	2300      	movs	r3, #0
 80004f4:	72fb      	strb	r3, [r7, #11]
 80004f6:	e013      	b.n	8000520 <Calculate_CRC16+0x58>
            if (crc & 0x8000)
 80004f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da09      	bge.n	8000514 <Calculate_CRC16+0x4c>
                crc = (crc << 1) ^ 0x1021;
 8000500:	89fb      	ldrh	r3, [r7, #14]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	b21b      	sxth	r3, r3
 8000506:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800050a:	f083 0301 	eor.w	r3, r3, #1
 800050e:	b21b      	sxth	r3, r3
 8000510:	81fb      	strh	r3, [r7, #14]
 8000512:	e002      	b.n	800051a <Calculate_CRC16+0x52>
            else
                crc = crc << 1;
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800051a:	7afb      	ldrb	r3, [r7, #11]
 800051c:	3301      	adds	r3, #1
 800051e:	72fb      	strb	r3, [r7, #11]
 8000520:	7afb      	ldrb	r3, [r7, #11]
 8000522:	2b07      	cmp	r3, #7
 8000524:	d9e8      	bls.n	80004f8 <Calculate_CRC16+0x30>
    for (uint16_t i = 0; i < length; i++) {
 8000526:	89bb      	ldrh	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	81bb      	strh	r3, [r7, #12]
 800052c:	89ba      	ldrh	r2, [r7, #12]
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3d5      	bcc.n	80004e0 <Calculate_CRC16+0x18>
        }
    }
    return crc;
 8000534:	89fb      	ldrh	r3, [r7, #14]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <packframe>:

void packframe(uint8_t *outbuf, frame_t  *trans, uint8_t command){
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	4613      	mov	r3, r2
 800054e:	71fb      	strb	r3, [r7, #7]
	outbuf[0] = trans->start_bit;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	701a      	strb	r2, [r3, #0]
	trans->command = command;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	705a      	strb	r2, [r3, #1]
	outbuf[1] = trans->command;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	7852      	ldrb	r2, [r2, #1]
 8000566:	701a      	strb	r2, [r3, #0]
	outbuf[2] = (uint8_t)(trans->length >> 8)&0xFF;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	885b      	ldrh	r3, [r3, #2]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	b29a      	uxth	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3302      	adds	r3, #2
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	701a      	strb	r2, [r3, #0]
	outbuf[3] = (uint8_t)(trans->length & 0xFF);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	885a      	ldrh	r2, [r3, #2]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3303      	adds	r3, #3
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	701a      	strb	r2, [r3, #0]
	// Copy payload vào frame (nếu có)
	if (trans->payload != NULL && trans->length > 0) {
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d00c      	beq.n	80005a6 <packframe+0x64>
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	885b      	ldrh	r3, [r3, #2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <packframe+0x64>
	    memcpy(&outbuf[4], trans->payload, trans->length);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	1d18      	adds	r0, r3, #4
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	6859      	ldr	r1, [r3, #4]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	885b      	ldrh	r3, [r3, #2]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f004 fa9d 	bl	8004ae0 <memcpy>
	}
	trans->CRC_16 = Calculate_CRC16(&outbuf[1],trans->length + 3); // temp ktr xiu nua xoa
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	885b      	ldrh	r3, [r3, #2]
 80005ae:	3303      	adds	r3, #3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	4610      	mov	r0, r2
 80005b6:	f7ff ff87 	bl	80004c8 <Calculate_CRC16>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	811a      	strh	r2, [r3, #8]
	outbuf[trans->length + 4] = ((trans->CRC_16)>>8)&0xFF;
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	891b      	ldrh	r3, [r3, #8]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	b299      	uxth	r1, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	3304      	adds	r3, #4
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	b2ca      	uxtb	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
	outbuf[trans->length + 5] = trans->CRC_16&0xFF;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	8919      	ldrh	r1, [r3, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	3305      	adds	r3, #5
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	b2ca      	uxtb	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]
	outbuf[6 + trans->length] = trans->end;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	885b      	ldrh	r3, [r3, #2]
 80005ee:	3306      	adds	r3, #6
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	7a92      	ldrb	r2, [r2, #10]
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <get_ADC>:
uint8_t is_transmitting = 0;

#define PI 3.14159265f

float get_ADC(uint32_t sample_index, uint32_t num_samples)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
    float angle = (2.0f * PI * sample_index) / num_samples;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000618:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000660 <get_ADC+0x5c>
 800061c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800062a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800062e:	edc7 7a05 	vstr	s15, [r7, #20]
    float sine_value = sinf(angle);
 8000632:	ed97 0a05 	vldr	s0, [r7, #20]
 8000636:	f004 faab 	bl	8004b90 <sinf>
 800063a:	ed87 0a04 	vstr	s0, [r7, #16]
    float scaled_value = sine_value * 30.0f;
 800063e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000642:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064a:	edc7 7a03 	vstr	s15, [r7, #12]
    return scaled_value;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	ee07 3a90 	vmov	s15, r3
}
 8000654:	eeb0 0a67 	vmov.f32	s0, s15
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40c90fdb 	.word	0x40c90fdb

08000664 <SendADCValue>:

void SendADCValue(frame_t *trans) { // mo phong dang song ADC
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    trans->payload = calloc(trans->length, sizeof(uint8_t));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	885b      	ldrh	r3, [r3, #2]
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f89a 	bl	80047ac <calloc>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	605a      	str	r2, [r3, #4]
    if (trans->payload == NULL) return;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d021      	beq.n	80006cc <SendADCValue+0x68>

    for (uint16_t i = 0; i < trans->length/4; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	81fb      	strh	r3, [r7, #14]
 800068c:	e016      	b.n	80006bc <SendADCValue+0x58>
        float adc_value = get_ADC(i,trans->length/4); // Giả định hàm do đồng nghiệp bạn cung cấp
 800068e:	89fa      	ldrh	r2, [r7, #14]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	885b      	ldrh	r3, [r3, #2]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b29b      	uxth	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	4610      	mov	r0, r2
 800069c:	f7ff ffb2 	bl	8000604 <get_ADC>
 80006a0:	eef0 7a40 	vmov.f32	s15, s0
 80006a4:	edc7 7a02 	vstr	s15, [r7, #8]
        memcpy(&trans->payload[i * 4], &adc_value, 4); // Sao chép 4 byte của float
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	89fa      	ldrh	r2, [r7, #14]
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < trans->length/4; i++) {
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	3301      	adds	r3, #1
 80006ba:	81fb      	strh	r3, [r7, #14]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	885b      	ldrh	r3, [r3, #2]
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	89fa      	ldrh	r2, [r7, #14]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3e1      	bcc.n	800068e <SendADCValue+0x2a>
 80006ca:	e000      	b.n	80006ce <SendADCValue+0x6a>
    if (trans->payload == NULL) return;
 80006cc:	bf00      	nop
    }
}
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && is_transmitting == 0 && tran_data != NULL) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d114      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x3a>
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d110      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x3a>
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00c      	beq.n	800070e <HAL_TIM_PeriodElapsedCallback+0x3a>
	        is_transmitting = 1;  // Đánh dấu đang truyền
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Transmit_DMA(&huart2, tran_data,transmit.length + 7);
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	3307      	adds	r3, #7
 8000704:	b29b      	uxth	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	4807      	ldr	r0, [pc, #28]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800070a:	f002 fe95 	bl	8003438 <HAL_UART_Transmit_DMA>
	}
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000c0 	.word	0x200000c0
 800071c:	20000236 	.word	0x20000236
 8000720:	20000230 	.word	0x20000230
 8000724:	20000210 	.word	0x20000210
 8000728:	20000108 	.word	0x20000108

0800072c <HAL_UARTEx_RxEventCallback>:

uint16_t check = 0;
uint32_t rx_data = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
	uint32_t rx_data = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	rx_data = atoi((char*)RX_data); // string => int
 800073c:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x94>)
 800073e:	f004 f831 	bl	80047a4 <atoi>
 8000742:	4603      	mov	r3, r0
 8000744:	60fb      	str	r3, [r7, #12]
	transmit.length = floorf(5000/rx_data)*4;
 8000746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800075c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000764:	ee17 3a90 	vmov	r3, s15
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x98>)
 800076c:	805a      	strh	r2, [r3, #2]
	SendADCValue(&transmit);
 800076e:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x98>)
 8000770:	f7ff ff78 	bl	8000664 <SendADCValue>
	frameSize = 7 + transmit.length*4;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x98>)
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	b29b      	uxth	r3, r3
 800077c:	3307      	adds	r3, #7
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000782:	801a      	strh	r2, [r3, #0]
	tran_data = calloc(frameSize,sizeof(uint8_t));
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f80e 	bl	80047ac <calloc>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_UARTEx_RxEventCallback+0xa0>)
 8000796:	601a      	str	r2, [r3, #0]
	packframe(tran_data, &transmit, 0x20);
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_UARTEx_RxEventCallback+0xa0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2220      	movs	r2, #32
 800079e:	4909      	ldr	r1, [pc, #36]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x98>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fece 	bl	8000542 <packframe>
	HAL_TIM_Base_Start_IT(&htim2);
 80007a6:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 80007a8:	f002 fa0c 	bl	8002bc4 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 11);
 80007ac:	220b      	movs	r2, #11
 80007ae:	4904      	ldr	r1, [pc, #16]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x94>)
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <HAL_UARTEx_RxEventCallback+0xa8>)
 80007b2:	f002 feb1 	bl	8003518 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000021c 	.word	0x2000021c
 80007c4:	20000210 	.word	0x20000210
 80007c8:	20000234 	.word	0x20000234
 80007cc:	20000230 	.word	0x20000230
 80007d0:	200000c0 	.word	0x200000c0
 80007d4:	20000108 	.word	0x20000108

080007d8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <HAL_UART_TxCpltCallback+0x34>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d10c      	bne.n	8000802 <HAL_UART_TxCpltCallback+0x2a>
        free(tran_data);
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_UART_TxCpltCallback+0x38>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fff9 	bl	80047e4 <free>
        free(transmit.payload);
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_UART_TxCpltCallback+0x3c>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fff4 	bl	80047e4 <free>
        is_transmitting = 0;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_UART_TxCpltCallback+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    }
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000108 	.word	0x20000108
 8000810:	20000230 	.word	0x20000230
 8000814:	20000210 	.word	0x20000210
 8000818:	20000236 	.word	0x20000236

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fbac 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f81e 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f96a 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 800082c:	f000 f940 	bl	8000ab0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000830:	f000 f876 	bl	8000920 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000834:	f000 f8c6 	bl	80009c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000838:	f000 f910 	bl	8000a5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  transmit.start_bit=0xAA;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <main+0x3c>)
 800083e:	22aa      	movs	r2, #170	@ 0xaa
 8000840:	701a      	strb	r2, [r3, #0]
  transmit.end = 0XAF;
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <main+0x3c>)
 8000844:	22af      	movs	r2, #175	@ 0xaf
 8000846:	729a      	strb	r2, [r3, #10]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 11);
 8000848:	220b      	movs	r2, #11
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <main+0x40>)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <main+0x44>)
 800084e:	f002 fe63 	bl	8003518 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <main+0x36>
 8000856:	bf00      	nop
 8000858:	20000210 	.word	0x20000210
 800085c:	2000021c 	.word	0x2000021c
 8000860:	20000108 	.word	0x20000108

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	@ 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f8f0 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <SystemClock_Config+0xb4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <SystemClock_Config+0xb4>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	@ 0x40
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <SystemClock_Config+0xb4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <SystemClock_Config+0xb8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <SystemClock_Config+0xb8>)
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <SystemClock_Config+0xb8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fccd 	bl	8002274 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008e0:	f000 f936 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 ff30 	bl	8002764 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800090a:	f000 f921 	bl	8000b50 <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3750      	adds	r7, #80	@ 0x50
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000934:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <MX_ADC1_Init+0x9c>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000960:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <MX_ADC1_Init+0xa0>)
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800096c:	2201      	movs	r2, #1
 800096e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000980:	f000 fb6e 	bl	8001060 <HAL_ADC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f8e1 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_ADC1_Init+0x98>)
 80009a0:	f000 fba2 	bl	80010e8 <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009aa:	f000 f8d1 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000078 	.word	0x20000078
 80009bc:	40012000 	.word	0x40012000
 80009c0:	0f000001 	.word	0x0f000001

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM2_Init+0x94>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM2_Init+0x94>)
 80009ea:	224f      	movs	r2, #79	@ 0x4f
 80009ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM2_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM2_Init+0x94>)
 80009f6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_TIM2_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <MX_TIM2_Init+0x94>)
 8000a0a:	f002 f88b 	bl	8002b24 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a14:	f000 f89c 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <MX_TIM2_Init+0x94>)
 8000a26:	f002 fa1f 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a30:	f000 f88e 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_TIM2_Init+0x94>)
 8000a42:	f002 fc27 	bl	8003294 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 f880 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000c0 	.word	0x200000c0

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a92:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	f002 fc7f 	bl	8003398 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000aa0:	f000 f856 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000108 	.word	0x20000108
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_DMA_Init+0x4c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <MX_DMA_Init+0x4c>)
 8000ac0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_DMA_Init+0x4c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f000 fe0f 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000adc:	2010      	movs	r0, #16
 8000ade:	f000 fe28 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2011      	movs	r0, #17
 8000ae8:	f000 fe07 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000aec:	2011      	movs	r0, #17
 8000aee:	f000 fe20 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_GPIO_Init+0x4c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_ADC_MspInit+0x7c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d127      	bne.n	8000c1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <HAL_ADC_MspInit+0x84>)
 8000c1a:	f001 f9a7 	bl	8001f6c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c44:	d115      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201c      	movs	r0, #28
 8000c68:	f000 fd47 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f000 fd60 	bl	8001732 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8000dcc <HAL_UART_MspInit+0x14c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f040 8090 	bne.w	8000dc4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	4b49      	ldr	r3, [pc, #292]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a48      	ldr	r2, [pc, #288]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b46      	ldr	r3, [pc, #280]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	4a41      	ldr	r2, [pc, #260]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <HAL_UART_MspInit+0x150>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	f003 0308 	and.w	r3, r3, #8
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cec:	2307      	movs	r3, #7
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4837      	ldr	r0, [pc, #220]	@ (8000dd4 <HAL_UART_MspInit+0x154>)
 8000cf8:	f001 f938 	bl	8001f6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cfc:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000cfe:	4a37      	ldr	r2, [pc, #220]	@ (8000ddc <HAL_UART_MspInit+0x15c>)
 8000d00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d3c:	4826      	ldr	r0, [pc, #152]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d3e:	f000 fd13 	bl	8001768 <HAL_DMA_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d48:	f7ff ff02 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a22      	ldr	r2, [pc, #136]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d52:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <HAL_UART_MspInit+0x158>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d5a:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <HAL_UART_MspInit+0x164>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d64:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d68:	2240      	movs	r2, #64	@ 0x40
 8000d6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d98:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000d9a:	f000 fce5 	bl	8001768 <HAL_DMA_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000da4:	f7ff fed4 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dae:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <HAL_UART_MspInit+0x160>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2026      	movs	r0, #38	@ 0x26
 8000dba:	f000 fc9e 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dbe:	2026      	movs	r0, #38	@ 0x26
 8000dc0:	f000 fcb7 	bl	8001732 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	20000150 	.word	0x20000150
 8000ddc:	40026088 	.word	0x40026088
 8000de0:	200001b0 	.word	0x200001b0
 8000de4:	400260a0 	.word	0x400260a0

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f8ef 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <DMA1_Stream5_IRQHandler+0x10>)
 8000e4e:	f000 fe23 	bl	8001a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000150 	.word	0x20000150

08000e5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <DMA1_Stream6_IRQHandler+0x10>)
 8000e62:	f000 fe19 	bl	8001a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001b0 	.word	0x200001b0

08000e70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <TIM2_IRQHandler+0x10>)
 8000e76:	f001 ff07 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000c0 	.word	0x200000c0

08000e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <USART2_IRQHandler+0x10>)
 8000e8a:	f002 fba3 	bl	80035d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000108 	.word	0x20000108

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f003 fdde 	bl	8004a88 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20020000 	.word	0x20020000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	20000238 	.word	0x20000238
 8000f00:	20000388 	.word	0x20000388

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f003 fd9d 	bl	8004a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fc5f 	bl	800081c <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f6c:	08005b20 	.word	0x08005b20
  ldr r2, =_sbss
 8000f70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f74:	20000388 	.word	0x20000388

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fb9d 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fdd4 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fbb5 	bl	800174e <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 fb7d 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	2000023c 	.word	0x2000023c

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000023c 	.word	0x2000023c

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fd94 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f94a 	bl	800134c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1c>
 8001100:	2302      	movs	r3, #2
 8001102:	e113      	b.n	800132c <HAL_ADC_ConfigChannel+0x244>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d925      	bls.n	8001160 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	3b1e      	subs	r3, #30
 800112a:	2207      	movs	r2, #7
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43da      	mvns	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	400a      	ands	r2, r1
 8001138:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68d9      	ldr	r1, [r3, #12]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	4603      	mov	r3, r0
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4403      	add	r3, r0
 8001152:	3b1e      	subs	r3, #30
 8001154:	409a      	lsls	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	e022      	b.n	80011a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	2207      	movs	r2, #7
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	400a      	ands	r2, r1
 8001182:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6919      	ldr	r1, [r3, #16]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b29b      	uxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	4603      	mov	r3, r0
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4403      	add	r3, r0
 800119c:	409a      	lsls	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d824      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b05      	subs	r3, #5
 80011c0:	221f      	movs	r2, #31
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b05      	subs	r3, #5
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f6:	e04c      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	d824      	bhi.n	800124a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	3b23      	subs	r3, #35	@ 0x23
 8001212:	221f      	movs	r2, #31
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43da      	mvns	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	400a      	ands	r2, r1
 8001220:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	3b23      	subs	r3, #35	@ 0x23
 800123c:	fa00 f203 	lsl.w	r2, r0, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	631a      	str	r2, [r3, #48]	@ 0x30
 8001248:	e023      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3b41      	subs	r3, #65	@ 0x41
 800125c:	221f      	movs	r2, #31
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	400a      	ands	r2, r1
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b41      	subs	r3, #65	@ 0x41
 8001286:	fa00 f203 	lsl.w	r2, r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_ADC_ConfigChannel+0x250>)
 8001294:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a28      	ldr	r2, [pc, #160]	@ (800133c <HAL_ADC_ConfigChannel+0x254>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d10f      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1d8>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b12      	cmp	r3, #18
 80012a6:	d10b      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <HAL_ADC_ConfigChannel+0x254>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x23a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <HAL_ADC_ConfigChannel+0x258>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d003      	beq.n	80012dc <HAL_ADC_ConfigChannel+0x1f4>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b11      	cmp	r3, #17
 80012da:	d122      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <HAL_ADC_ConfigChannel+0x258>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_ADC_ConfigChannel+0x25c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a11      	ldr	r2, [pc, #68]	@ (8001348 <HAL_ADC_ConfigChannel+0x260>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9a      	lsrs	r2, r3, #18
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001314:	e002      	b.n	800131c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40012300 	.word	0x40012300
 800133c:	40012000 	.word	0x40012000
 8001340:	10000012 	.word	0x10000012
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83

0800134c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001354:	4b79      	ldr	r3, [pc, #484]	@ (800153c <ADC_Init+0x1f0>)
 8001356:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	431a      	orrs	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	021a      	lsls	r2, r3, #8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6899      	ldr	r1, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	4a58      	ldr	r2, [pc, #352]	@ (8001540 <ADC_Init+0x1f4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d022      	beq.n	800142a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6899      	ldr	r1, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e00f      	b.n	800144a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001448:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0202 	bic.w	r2, r2, #2
 8001458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
 8001464:	005a      	lsls	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001486:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	3b01      	subs	r3, #1
 80014a4:	035a      	lsls	r2, r3, #13
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	e007      	b.n	80014c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	3b01      	subs	r3, #1
 80014dc:	051a      	lsls	r2, r3, #20
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001502:	025a      	lsls	r2, r3, #9
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800151a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	029a      	lsls	r2, r3, #10
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40012300 	.word	0x40012300
 8001540:	0f000001 	.word	0x0f000001

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	@ (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fc68 	bl	8001048 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e099      	b.n	80018b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	e00f      	b.n	80017c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fc4f 	bl	8001048 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d908      	bls.n	80017c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e078      	b.n	80018b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e8      	bne.n	80017a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_DMA_Init+0x158>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	2b04      	cmp	r3, #4
 800181e:	d107      	bne.n	8001830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	4313      	orrs	r3, r2
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	2b04      	cmp	r3, #4
 8001858:	d117      	bne.n	800188a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fb01 	bl	8001e74 <DMA_CheckFifoParam>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2240      	movs	r2, #64	@ 0x40
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001886:	2301      	movs	r3, #1
 8001888:	e016      	b.n	80018b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fab8 	bl	8001e08 <DMA_CalcBaseAndBitshift>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	223f      	movs	r2, #63	@ 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	f010803f 	.word	0xf010803f

080018c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_DMA_Start_IT+0x26>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e040      	b.n	800196c <HAL_DMA_Start_IT+0xa8>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12f      	bne.n	800195e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2202      	movs	r2, #2
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fa4a 	bl	8001dac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	223f      	movs	r2, #63	@ 0x3f
 800191e:	409a      	lsls	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0216 	orr.w	r2, r2, #22
 8001932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0208 	orr.w	r2, r2, #8
 800194a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e005      	b.n	800196a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001980:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001982:	f7ff fb61 	bl	8001048 <HAL_GetTick>
 8001986:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d008      	beq.n	80019a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2280      	movs	r2, #128	@ 0x80
 8001998:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e052      	b.n	8001a4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0216 	bic.w	r2, r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <HAL_DMA_Abort+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0208 	bic.w	r2, r2, #8
 80019e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	e013      	b.n	8001a20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f8:	f7ff fb26 	bl	8001048 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d90c      	bls.n	8001a20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e015      	b.n	8001a4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e4      	bne.n	80019f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	223f      	movs	r2, #63	@ 0x3f
 8001a34:	409a      	lsls	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d004      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00c      	b.n	8001a8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce0 <HAL_DMA_IRQHandler+0x248>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a8e      	ldr	r2, [pc, #568]	@ (8001ce4 <HAL_DMA_IRQHandler+0x24c>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01a      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0204 	bic.w	r2, r2, #4
 8001aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	2208      	movs	r2, #8
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	2201      	movs	r2, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b26:	2201      	movs	r2, #1
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b74:	2210      	movs	r2, #16
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d043      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03c      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b92:	2210      	movs	r2, #16
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d018      	beq.n	8001bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
 8001bc6:	e01f      	b.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e016      	b.n	8001c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0208 	bic.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 808f 	beq.w	8001d38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8087 	beq.w	8001d38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2e:	2220      	movs	r2, #32
 8001c30:	409a      	lsls	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d136      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0216 	bic.w	r2, r2, #22
 8001c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x1da>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c86:	223f      	movs	r2, #63	@ 0x3f
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d07e      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
        }
        return;
 8001cae:	e079      	b.n	8001da4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01d      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d031      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e02c      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e01e      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0210 	bic.w	r2, r2, #16
 8001d16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d032      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d022      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2205      	movs	r2, #5
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d307      	bcc.n	8001d80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f2      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x2cc>
 8001d7e:	e000      	b.n	8001d82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001da4:	bf00      	nop
    }
  }
}
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b40      	cmp	r3, #64	@ 0x40
 8001dd8:	d108      	bne.n	8001dec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dea:	e007      	b.n	8001dfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3b10      	subs	r3, #16
 8001e18:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <DMA_CalcBaseAndBitshift+0x64>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e22:	4a13      	ldr	r2, [pc, #76]	@ (8001e70 <DMA_CalcBaseAndBitshift+0x68>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d909      	bls.n	8001e4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e48:	e007      	b.n	8001e5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	aaaaaaab 	.word	0xaaaaaaab
 8001e70:	08005634 	.word	0x08005634

08001e74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11f      	bne.n	8001ece <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d856      	bhi.n	8001f42 <DMA_CheckFifoParam+0xce>
 8001e94:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <DMA_CheckFifoParam+0x28>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001ebf 	.word	0x08001ebf
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001f43 	.word	0x08001f43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d046      	beq.n	8001f46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebc:	e043      	b.n	8001f46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ec6:	d140      	bne.n	8001f4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ecc:	e03d      	b.n	8001f4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed6:	d121      	bne.n	8001f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d837      	bhi.n	8001f4e <DMA_CheckFifoParam+0xda>
 8001ede:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee4 <DMA_CheckFifoParam+0x70>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001efb 	.word	0x08001efb
 8001eec:	08001ef5 	.word	0x08001ef5
 8001ef0:	08001f0d 	.word	0x08001f0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef8:	e030      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d025      	beq.n	8001f52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0a:	e022      	b.n	8001f52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f14:	d11f      	bne.n	8001f56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f1a:	e01c      	b.n	8001f56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d903      	bls.n	8001f2a <DMA_CheckFifoParam+0xb6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f28:	e018      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2e:	e015      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00e      	beq.n	8001f5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f40:	e00b      	b.n	8001f5a <DMA_CheckFifoParam+0xe6>
      break;
 8001f42:	bf00      	nop
 8001f44:	e00a      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e008      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e006      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e004      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f52:	bf00      	nop
 8001f54:	e002      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e159      	b.n	800223c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8148 	bne.w	8002236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a2 	beq.w	8002236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a56      	ldr	r2, [pc, #344]	@ (8002254 <HAL_GPIO_Init+0x2e8>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b54      	ldr	r3, [pc, #336]	@ (8002254 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_GPIO_Init+0x2ec>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	@ (800225c <HAL_GPIO_Init+0x2f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x202>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a48      	ldr	r2, [pc, #288]	@ (8002260 <HAL_GPIO_Init+0x2f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x1fe>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a47      	ldr	r2, [pc, #284]	@ (8002264 <HAL_GPIO_Init+0x2f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x1fa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a46      	ldr	r2, [pc, #280]	@ (8002268 <HAL_GPIO_Init+0x2fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x1f6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_GPIO_Init+0x300>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x1f2>
 800215a:	2304      	movs	r3, #4
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800215e:	2307      	movs	r3, #7
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	@ (8002258 <HAL_GPIO_Init+0x2ec>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <HAL_GPIO_Init+0x304>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_GPIO_Init+0x304>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_GPIO_Init+0x304>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_GPIO_Init+0x304>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f aea2 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	@ 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e267      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d075      	beq.n	800237e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002292:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d00c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b85      	ldr	r3, [pc, #532]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022aa:	4b82      	ldr	r3, [pc, #520]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b6:	d10b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d05b      	beq.n	800237c <HAL_RCC_OscConfig+0x108>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d157      	bne.n	800237c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e242      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x74>
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xb0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x98>
 80022f2:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6f      	ldr	r2, [pc, #444]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6c      	ldr	r2, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xb0>
 800230c:	4b69      	ldr	r3, [pc, #420]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a68      	ldr	r2, [pc, #416]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a65      	ldr	r2, [pc, #404]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fe8c 	bl	8001048 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fe88 	bl	8001048 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e207      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xc0>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fe78 	bl	8001048 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fe74 	bl	8001048 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1f3      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b51      	ldr	r3, [pc, #324]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0xe8>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d063      	beq.n	8002452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a2:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x152>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1c7      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4937      	ldr	r1, [pc, #220]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e03a      	b.n	8002452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_RCC_OscConfig+0x244>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fe2d 	bl	8001048 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fe29 	bl	8001048 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1a8      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4925      	ldr	r1, [pc, #148]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x244>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fe0c 	bl	8001048 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7fe fe08 	bl	8001048 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e187      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d036      	beq.n	80024cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_RCC_OscConfig+0x248>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fdec 	bl	8001048 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7fe fde8 	bl	8001048 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e167      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_OscConfig+0x240>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x200>
 8002492:	e01b      	b.n	80024cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_OscConfig+0x248>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe fdd5 	bl	8001048 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	e00e      	b.n	80024c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a2:	f7fe fdd1 	bl	8001048 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d907      	bls.n	80024c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e150      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	42470000 	.word	0x42470000
 80024bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b88      	ldr	r3, [pc, #544]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ea      	bne.n	80024a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8097 	beq.w	8002608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b81      	ldr	r3, [pc, #516]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b7d      	ldr	r3, [pc, #500]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a7c      	ldr	r2, [pc, #496]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b7a      	ldr	r3, [pc, #488]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b77      	ldr	r3, [pc, #476]	@ (80026e8 <HAL_RCC_OscConfig+0x474>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b74      	ldr	r3, [pc, #464]	@ (80026e8 <HAL_RCC_OscConfig+0x474>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a73      	ldr	r2, [pc, #460]	@ (80026e8 <HAL_RCC_OscConfig+0x474>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7fe fd91 	bl	8001048 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7fe fd8d 	bl	8001048 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e10c      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b6a      	ldr	r3, [pc, #424]	@ (80026e8 <HAL_RCC_OscConfig+0x474>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x2ea>
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	4a63      	ldr	r2, [pc, #396]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	@ 0x70
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0x324>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x30c>
 8002566:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a5e      	ldr	r2, [pc, #376]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
 8002572:	4b5c      	ldr	r3, [pc, #368]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	4a5b      	ldr	r2, [pc, #364]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	@ 0x70
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x324>
 8002580:	4b58      	ldr	r3, [pc, #352]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	4a57      	ldr	r2, [pc, #348]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	@ 0x70
 800258c:	4b55      	ldr	r3, [pc, #340]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd52 	bl	8001048 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fd4e 	bl	8001048 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0cb      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ee      	beq.n	80025a8 <HAL_RCC_OscConfig+0x334>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7fe fd3c 	bl	8001048 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe fd38 	bl	8001048 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0b5      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ea:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ee      	bne.n	80025d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a1 	beq.w	8002754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002612:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b08      	cmp	r3, #8
 800261c:	d05c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d141      	bne.n	80026aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fd0c 	bl	8001048 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fd08 	bl	8001048 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e087      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	491b      	ldr	r1, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x478>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fce1 	bl	8001048 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fcdd 	bl	8001048 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e05c      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x416>
 80026a8:	e054      	b.n	8002754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_RCC_OscConfig+0x478>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fcca 	bl	8001048 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fcc6 	bl	8001048 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e045      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x444>
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e038      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000
 80026ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d028      	beq.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d121      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d11a      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002728:	4293      	cmp	r3, r2
 800272a:	d111      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0cc      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b68      	ldr	r3, [pc, #416]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d90c      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b63      	ldr	r3, [pc, #396]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b8      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b8:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a58      	ldr	r2, [pc, #352]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d0:	4b53      	ldr	r3, [pc, #332]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a52      	ldr	r2, [pc, #328]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b50      	ldr	r3, [pc, #320]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	494d      	ldr	r1, [pc, #308]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d044      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b47      	ldr	r3, [pc, #284]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d119      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d003      	beq.n	8002822 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	2b03      	cmp	r3, #3
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e067      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4934      	ldr	r1, [pc, #208]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7fe fbf8 	bl	8001048 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fbf4 	bl	8001048 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e04f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2b      	ldr	r3, [pc, #172]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d20c      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b22      	ldr	r3, [pc, #136]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e032      	b.n	8002912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4916      	ldr	r1, [pc, #88]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d6:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	490e      	ldr	r1, [pc, #56]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ea:	f000 f821 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490a      	ldr	r1, [pc, #40]	@ (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fb58 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023c00 	.word	0x40023c00
 8002920:	40023800 	.word	0x40023800
 8002924:	0800561c 	.word	0x0800561c
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002934:	b090      	sub	sp, #64	@ 0x40
 8002936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002948:	4b59      	ldr	r3, [pc, #356]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d00d      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x40>
 8002954:	2b08      	cmp	r3, #8
 8002956:	f200 80a1 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x16c>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 800295e:	2b04      	cmp	r3, #4
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x3a>
 8002962:	e09b      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b53      	ldr	r3, [pc, #332]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002968:	e09b      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296a:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800296e:	e098      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002970:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002978:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	2200      	movs	r2, #0
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	627a      	str	r2, [r7, #36]	@ 0x24
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002998:	2100      	movs	r1, #0
 800299a:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800299c:	fb03 f201 	mul.w	r2, r3, r1
 80029a0:	2300      	movs	r3, #0
 80029a2:	fb00 f303 	mul.w	r3, r0, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	4a43      	ldr	r2, [pc, #268]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029aa:	fba0 1202 	umull	r1, r2, r0, r2
 80029ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b0:	460a      	mov	r2, r1
 80029b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b6:	4413      	add	r3, r2
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029bc:	2200      	movs	r2, #0
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ca:	f7fd fc05 	bl	80001d8 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4613      	mov	r3, r2
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d6:	e053      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	2200      	movs	r2, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	617a      	str	r2, [r7, #20]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ea:	f04f 0b00 	mov.w	fp, #0
 80029ee:	4652      	mov	r2, sl
 80029f0:	465b      	mov	r3, fp
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	ebb2 080a 	subs.w	r8, r2, sl
 8002a0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a22:	ebb2 0408 	subs.w	r4, r2, r8
 8002a26:	eb63 0509 	sbc.w	r5, r3, r9
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	00eb      	lsls	r3, r5, #3
 8002a34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a38:	00e2      	lsls	r2, r4, #3
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	461d      	mov	r5, r3
 8002a3e:	eb14 030a 	adds.w	r3, r4, sl
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	eb45 030b 	adc.w	r3, r5, fp
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a74:	f7fd fbb0 	bl	80001d8 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3740      	adds	r7, #64	@ 0x40
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	017d7840 	.word	0x017d7840

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800562c 	.word	0x0800562c

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffdc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0b5b      	lsrs	r3, r3, #13
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0800562c 	.word	0x0800562c

08002b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e041      	b.n	8002bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f872 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fa70 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d001      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e044      	b.n	8002c66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x6c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c06:	d013      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x6c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x6c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a19      	ldr	r2, [pc, #100]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xb8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x6c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a17      	ldr	r2, [pc, #92]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x6c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d111      	bne.n	8002c54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d010      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	e007      	b.n	8002c64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40014000 	.word	0x40014000

08002c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d020      	beq.n	8002cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f999 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f98b 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f99c 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0204 	mvn.w	r2, #4
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f973 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f965 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f976 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0208 	mvn.w	r2, #8
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f94d 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f93f 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f950 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d020      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0210 	mvn.w	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2208      	movs	r2, #8
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f927 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f919 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f92a 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0201 	mvn.w	r2, #1
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd fc70 	bl	80006d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fab6 	bl	8003384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8fb 	bl	8003032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0220 	mvn.w	r2, #32
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa88 	bl	8003370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_ConfigClockSource+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0b4      	b.n	8002fee <HAL_TIM_ConfigClockSource+0x186>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ebc:	d03e      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0xd4>
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec2:	f200 8087 	bhi.w	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eca:	f000 8086 	beq.w	8002fda <HAL_TIM_ConfigClockSource+0x172>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed2:	d87f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b70      	cmp	r3, #112	@ 0x70
 8002ed6:	d01a      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xa6>
 8002ed8:	2b70      	cmp	r3, #112	@ 0x70
 8002eda:	d87b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b60      	cmp	r3, #96	@ 0x60
 8002ede:	d050      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x11a>
 8002ee0:	2b60      	cmp	r3, #96	@ 0x60
 8002ee2:	d877      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b50      	cmp	r3, #80	@ 0x50
 8002ee6:	d03c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0xfa>
 8002ee8:	2b50      	cmp	r3, #80	@ 0x50
 8002eea:	d873      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d058      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8002ef0:	2b40      	cmp	r3, #64	@ 0x40
 8002ef2:	d86f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b30      	cmp	r3, #48	@ 0x30
 8002ef6:	d064      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b30      	cmp	r3, #48	@ 0x30
 8002efa:	d86b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d060      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d867      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05c      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d05a      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	e062      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	f000 f999 	bl	8003254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	609a      	str	r2, [r3, #8]
      break;
 8002f3a:	e04f      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	f000 f982 	bl	8003254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5e:	609a      	str	r2, [r3, #8]
      break;
 8002f60:	e03c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 f8f6 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2150      	movs	r1, #80	@ 0x50
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f94f 	bl	800321e <TIM_ITRx_SetConfig>
      break;
 8002f80:	e02c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 f915 	bl	80031be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2160      	movs	r1, #96	@ 0x60
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f93f 	bl	800321e <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e01c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f000 f8d6 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2140      	movs	r1, #64	@ 0x40
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f92f 	bl	800321e <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e00c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 f926 	bl	800321e <TIM_ITRx_SetConfig>
      break;
 8002fd2:	e003      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3a      	ldr	r2, [pc, #232]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d00b      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a37      	ldr	r2, [pc, #220]	@ (8003148 <TIM_Base_SetConfig+0x100>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a36      	ldr	r2, [pc, #216]	@ (800314c <TIM_Base_SetConfig+0x104>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <TIM_Base_SetConfig+0x108>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01b      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a0:	d017      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a28      	ldr	r2, [pc, #160]	@ (8003148 <TIM_Base_SetConfig+0x100>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <TIM_Base_SetConfig+0x104>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <TIM_Base_SetConfig+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <TIM_Base_SetConfig+0x10c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <TIM_Base_SetConfig+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a23      	ldr	r2, [pc, #140]	@ (800315c <TIM_Base_SetConfig+0x114>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
  }
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800

08003160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 030a 	bic.w	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 0210 	bic.w	r2, r3, #16
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	f043 0307 	orr.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800326e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	021a      	lsls	r2, r3, #8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	431a      	orrs	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	609a      	str	r2, [r3, #8]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e050      	b.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f8:	d013      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a16      	ldr	r2, [pc, #88]	@ (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a13      	ldr	r2, [pc, #76]	@ (800336c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10c      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000

08003370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e042      	b.n	8003430 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fc5e 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	@ 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 ff6d 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	@ 0x30
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d156      	bne.n	8003500 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_UART_Transmit_DMA+0x26>
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e04f      	b.n	8003502 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2221      	movs	r2, #33	@ 0x21
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	4a21      	ldr	r2, [pc, #132]	@ (800350c <HAL_UART_Transmit_DMA+0xd4>)
 8003488:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <HAL_UART_Transmit_DMA+0xd8>)
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_UART_Transmit_DMA+0xdc>)
 8003498:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	2200      	movs	r2, #0
 80034a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	461a      	mov	r2, r3
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f7fe fa03 	bl	80018c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	617b      	str	r3, [r7, #20]
   return(result);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80034ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6a39      	ldr	r1, [r7, #32]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e5      	bne.n	80034c8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3730      	adds	r7, #48	@ 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08003b49 	.word	0x08003b49
 8003510:	08003be3 	.word	0x08003be3
 8003514:	08003d67 	.word	0x08003d67

08003518 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b20      	cmp	r3, #32
 8003530:	d14a      	bne.n	80035c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e043      	b.n	80035ca <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	461a      	mov	r2, r3
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fc51 	bl	8003dfc <UART_Start_Receive_DMA>
 800355a:	4603      	mov	r3, r0
 800355c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003564:	2b00      	cmp	r3, #0
 8003566:	d12c      	bne.n	80035c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	d125      	bne.n	80035bc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	617b      	str	r3, [r7, #20]
   return(result);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80035a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6a39      	ldr	r1, [r7, #32]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80035ba:	e002      	b.n	80035c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80035c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035c6:	e000      	b.n	80035ca <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	@ 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0ba      	sub	sp, #232	@ 0xe8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_UART_IRQHandler+0x66>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd83 	bl	800413e <UART_Receive_IT>
      return;
 8003638:	e25b      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800363a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80de 	beq.w	8003800 <HAL_UART_IRQHandler+0x22c>
 8003644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003654:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80d1 	beq.w	8003800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_UART_IRQHandler+0xae>
 800366a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_UART_IRQHandler+0xd2>
 800368e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xf6>
 80036b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d011      	beq.n	80036fa <HAL_UART_IRQHandler+0x126>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 81f2 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_UART_IRQHandler+0x14e>
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fd0e 	bl	800413e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_UART_IRQHandler+0x17a>
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04f      	beq.n	80037ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fc16 	bl	8003f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d141      	bne.n	80037e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800377c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800378e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800379a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d9      	bne.n	8003762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ba:	4a7e      	ldr	r2, [pc, #504]	@ (80039b4 <HAL_UART_IRQHandler+0x3e0>)
 80037bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe f946 	bl	8001a54 <HAL_DMA_Abort_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037d8:	4610      	mov	r0, r2
 80037da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00e      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9a8 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e00a      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9a4 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e006      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9a0 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037fa:	e175      	b.n	8003ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	bf00      	nop
    return;
 80037fe:	e173      	b.n	8003ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 814f 	bne.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8148 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8141 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b40      	cmp	r3, #64	@ 0x40
 8003848:	f040 80b6 	bne.w	80039b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8145 	beq.w	8003aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800386a:	429a      	cmp	r2, r3
 800386c:	f080 813e 	bcs.w	8003aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003876:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003882:	f000 8088 	beq.w	8003996 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800389c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1d9      	bne.n	8003886 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3314      	adds	r3, #20
 80038f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e1      	bne.n	80038d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800391e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e3      	bne.n	800390e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003966:	f023 0310 	bic.w	r3, r3, #16
 800396a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003978:	65ba      	str	r2, [r7, #88]	@ 0x58
 800397a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800397e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd ffef 	bl	8001974 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fc febd 	bl	800072c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039b2:	e09b      	b.n	8003aec <HAL_UART_IRQHandler+0x518>
 80039b4:	08004047 	.word	0x08004047
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 808e 	beq.w	8003af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8089 	beq.w	8003af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a02:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e3      	bne.n	80039de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	623b      	str	r3, [r7, #32]
   return(result);
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a80:	61fa      	str	r2, [r7, #28]
 8003a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e3      	bne.n	8003a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fc fe43 	bl	800072c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aa6:	e023      	b.n	8003af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x4f4>
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fad4 	bl	800406e <UART_Transmit_IT>
    return;
 8003ac6:	e014      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <HAL_UART_IRQHandler+0x51e>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb14 	bl	800410e <UART_EndTransmit_IT>
    return;
 8003ae6:	e004      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003af0:	bf00      	nop
  }
}
 8003af2:	37e8      	adds	r7, #232	@ 0xe8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b090      	sub	sp, #64	@ 0x40
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d137      	bne.n	8003bd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	2200      	movs	r2, #0
 8003b68:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e5      	bne.n	8003b6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bbe:	61fa      	str	r2, [r7, #28]
 8003bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	69b9      	ldr	r1, [r7, #24]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	617b      	str	r3, [r7, #20]
   return(result);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bd2:	e002      	b.n	8003bda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003bd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bd6:	f7fc fdff 	bl	80007d8 <HAL_UART_TxCpltCallback>
}
 8003bda:	bf00      	nop
 8003bdc:	3740      	adds	r7, #64	@ 0x40
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff81 	bl	8003af8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b09c      	sub	sp, #112	@ 0x70
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d172      	bne.n	8003d00 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c74:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	623b      	str	r3, [r7, #32]
   return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ca8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d119      	bne.n	8003d00 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d106      	bne.n	8003d1c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d12:	4619      	mov	r1, r3
 8003d14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d16:	f7fc fd09 	bl	800072c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d1a:	e002      	b.n	8003d22 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003d1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d1e:	f7ff fef5 	bl	8003b0c <HAL_UART_RxCpltCallback>
}
 8003d22:	bf00      	nop
 8003d24:	3770      	adds	r7, #112	@ 0x70
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d108      	bne.n	8003d58 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7fc fceb 	bl	800072c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d56:	e002      	b.n	8003d5e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fee1 	bl	8003b20 <HAL_UART_RxHalfCpltCallback>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b80      	cmp	r3, #128	@ 0x80
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b21      	cmp	r3, #33	@ 0x21
 8003d98:	d108      	bne.n	8003dac <UART_DMAError+0x46>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f000 f8c2 	bl	8003f30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	bf0c      	ite	eq
 8003dba:	2301      	moveq	r3, #1
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b22      	cmp	r3, #34	@ 0x22
 8003dcc:	d108      	bne.n	8003de0 <UART_DMAError+0x7a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003dda:	68b8      	ldr	r0, [r7, #8]
 8003ddc:	f000 f8d0 	bl	8003f80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de4:	f043 0210 	orr.w	r2, r3, #16
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dec:	68b8      	ldr	r0, [r7, #8]
 8003dee:	f7ff fea1 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b098      	sub	sp, #96	@ 0x60
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2222      	movs	r2, #34	@ 0x22
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	4a3e      	ldr	r2, [pc, #248]	@ (8003f24 <UART_Start_Receive_DMA+0x128>)
 8003e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	4a3d      	ldr	r2, [pc, #244]	@ (8003f28 <UART_Start_Receive_DMA+0x12c>)
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	4a3c      	ldr	r2, [pc, #240]	@ (8003f2c <UART_Start_Receive_DMA+0x130>)
 8003e3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	2200      	movs	r2, #0
 8003e42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	f7fd fd32 	bl	80018c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d019      	beq.n	8003eb2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e9e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ed2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f06:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6a39      	ldr	r1, [r7, #32]
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3760      	adds	r7, #96	@ 0x60
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	08003bff 	.word	0x08003bff
 8003f28:	08003d2b 	.word	0x08003d2b
 8003f2c:	08003d67 	.word	0x08003d67

08003f30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	@ 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	61ba      	str	r2, [r7, #24]
 8003f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	613b      	str	r3, [r7, #16]
   return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003f74:	bf00      	nop
 8003f76:	3724      	adds	r7, #36	@ 0x24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b095      	sub	sp, #84	@ 0x54
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d119      	bne.n	800402c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60bb      	str	r3, [r7, #8]
   return(result);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004018:	61ba      	str	r2, [r7, #24]
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800403a:	bf00      	nop
 800403c:	3754      	adds	r7, #84	@ 0x54
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fd67 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b21      	cmp	r3, #33	@ 0x21
 8004080:	d13e      	bne.n	8004100 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408a:	d114      	bne.n	80040b6 <UART_Transmit_IT+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d110      	bne.n	80040b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	621a      	str	r2, [r3, #32]
 80040b4:	e008      	b.n	80040c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6211      	str	r1, [r2, #32]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fb52 	bl	80007d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08c      	sub	sp, #48	@ 0x30
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b22      	cmp	r3, #34	@ 0x22
 8004150:	f040 80ae 	bne.w	80042b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415c:	d117      	bne.n	800418e <UART_Receive_IT+0x50>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	b29a      	uxth	r2, r3
 800417e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
 800418c:	e026      	b.n	80041dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a0:	d007      	beq.n	80041b2 <UART_Receive_IT+0x74>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <UART_Receive_IT+0x82>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e008      	b.n	80041d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4619      	mov	r1, r3
 80041ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15d      	bne.n	80042ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0220 	bic.w	r2, r2, #32
 80041fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800420e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	2b01      	cmp	r3, #1
 8004234:	d135      	bne.n	80042a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	613b      	str	r3, [r7, #16]
   return(result);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	623a      	str	r2, [r7, #32]
 800425e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	69f9      	ldr	r1, [r7, #28]
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	61bb      	str	r3, [r7, #24]
   return(result);
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b10      	cmp	r3, #16
 800427c:	d10a      	bne.n	8004294 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc fa46 	bl	800072c <HAL_UARTEx_RxEventCallback>
 80042a0:	e002      	b.n	80042a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fc32 	bl	8003b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e002      	b.n	80042b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e000      	b.n	80042b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3730      	adds	r7, #48	@ 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b0c0      	sub	sp, #256	@ 0x100
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	ea40 0301 	orr.w	r3, r0, r1
 80042e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004314:	f021 010c 	bic.w	r1, r1, #12
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	ea40 0301 	orr.w	r3, r0, r1
 8004342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8f      	ldr	r3, [pc, #572]	@ (8004588 <UART_SetConfig+0x2cc>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <UART_SetConfig+0xa0>
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b8d      	ldr	r3, [pc, #564]	@ (800458c <UART_SetConfig+0x2d0>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d104      	bne.n	8004366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fbce 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004360:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004364:	e003      	b.n	800436e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe fbb5 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 800436a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004378:	f040 810c 	bne.w	8004594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004386:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800438a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	1891      	adds	r1, r2, r2
 8004394:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004396:	415b      	adcs	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800439e:	4621      	mov	r1, r4
 80043a0:	eb12 0801 	adds.w	r8, r2, r1
 80043a4:	4629      	mov	r1, r5
 80043a6:	eb43 0901 	adc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043cc:	462b      	mov	r3, r5
 80043ce:	eb49 0303 	adc.w	r3, r9, r3
 80043d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ea:	460b      	mov	r3, r1
 80043ec:	18db      	adds	r3, r3, r3
 80043ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f0:	4613      	mov	r3, r2
 80043f2:	eb42 0303 	adc.w	r3, r2, r3
 80043f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004400:	f7fb feea 	bl	80001d8 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b61      	ldr	r3, [pc, #388]	@ (8004590 <UART_SetConfig+0x2d4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800441c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800442c:	415b      	adcs	r3, r3
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004434:	4641      	mov	r1, r8
 8004436:	eb12 0a01 	adds.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb43 0b01 	adc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800444c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	4692      	mov	sl, r2
 8004456:	469b      	mov	fp, r3
 8004458:	4643      	mov	r3, r8
 800445a:	eb1a 0303 	adds.w	r3, sl, r3
 800445e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004462:	464b      	mov	r3, r9
 8004464:	eb4b 0303 	adc.w	r3, fp, r3
 8004468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004478:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800447c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	647b      	str	r3, [r7, #68]	@ 0x44
 800448e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004496:	f7fb fe9f 	bl	80001d8 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <UART_SetConfig+0x2d4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	@ 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044b6:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <UART_SetConfig+0x2d4>)
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e0:	415b      	adcs	r3, r3
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800451c:	464b      	mov	r3, r9
 800451e:	460a      	mov	r2, r1
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004534:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800454e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004552:	f7fb fe41 	bl	80001d8 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <UART_SetConfig+0x2d4>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	@ 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3332      	adds	r3, #50	@ 0x32
 800456e:	4a08      	ldr	r2, [pc, #32]	@ (8004590 <UART_SetConfig+0x2d4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4422      	add	r2, r4
 8004582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004584:	e106      	b.n	8004794 <UART_SetConfig+0x4d8>
 8004586:	bf00      	nop
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800459e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	415b      	adcs	r3, r3
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045b6:	4641      	mov	r1, r8
 80045b8:	1854      	adds	r4, r2, r1
 80045ba:	4649      	mov	r1, r9
 80045bc:	eb43 0501 	adc.w	r5, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	00eb      	lsls	r3, r5, #3
 80045ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ce:	00e2      	lsls	r2, r4, #3
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	18e3      	adds	r3, r4, r3
 80045d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045dc:	464b      	mov	r3, r9
 80045de:	eb45 0303 	adc.w	r3, r5, r3
 80045e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004602:	4629      	mov	r1, r5
 8004604:	008b      	lsls	r3, r1, #2
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460c:	4621      	mov	r1, r4
 800460e:	008a      	lsls	r2, r1, #2
 8004610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004614:	f7fb fde0 	bl	80001d8 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <UART_SetConfig+0x4e4>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	011c      	lsls	r4, r3, #4
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	61b9      	str	r1, [r7, #24]
 8004640:	415b      	adcs	r3, r3
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6139      	str	r1, [r7, #16]
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004692:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046b2:	f7fb fd91 	bl	80001d8 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <UART_SetConfig+0x4e4>)
 80046be:	fba3 2301 	umull	r2, r3, r3, r1
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	@ 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	@ 0x32
 80046d0:	4a33      	ldr	r2, [pc, #204]	@ (80047a0 <UART_SetConfig+0x4e4>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046dc:	441c      	add	r4, r3
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	415b      	adcs	r3, r3
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	4641      	mov	r1, r8
 80046fe:	1851      	adds	r1, r2, r1
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	4649      	mov	r1, r9
 8004704:	414b      	adcs	r3, r1
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004714:	4659      	mov	r1, fp
 8004716:	00cb      	lsls	r3, r1, #3
 8004718:	4651      	mov	r1, sl
 800471a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471e:	4651      	mov	r1, sl
 8004720:	00ca      	lsls	r2, r1, #3
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4603      	mov	r3, r0
 8004728:	4642      	mov	r2, r8
 800472a:	189b      	adds	r3, r3, r2
 800472c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472e:	464b      	mov	r3, r9
 8004730:	460a      	mov	r2, r1
 8004732:	eb42 0303 	adc.w	r3, r2, r3
 8004736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	663b      	str	r3, [r7, #96]	@ 0x60
 8004742:	667a      	str	r2, [r7, #100]	@ 0x64
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004750:	4649      	mov	r1, r9
 8004752:	008b      	lsls	r3, r1, #2
 8004754:	4641      	mov	r1, r8
 8004756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475a:	4641      	mov	r1, r8
 800475c:	008a      	lsls	r2, r1, #2
 800475e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004762:	f7fb fd39 	bl	80001d8 <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <UART_SetConfig+0x4e4>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	@ 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3332      	adds	r3, #50	@ 0x32
 800477e:	4a08      	ldr	r2, [pc, #32]	@ (80047a0 <UART_SetConfig+0x4e4>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4422      	add	r2, r4
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	bf00      	nop
 8004796:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a0:	51eb851f 	.word	0x51eb851f

080047a4 <atoi>:
 80047a4:	220a      	movs	r2, #10
 80047a6:	2100      	movs	r1, #0
 80047a8:	f000 b94c 	b.w	8004a44 <strtol>

080047ac <calloc>:
 80047ac:	4b02      	ldr	r3, [pc, #8]	@ (80047b8 <calloc+0xc>)
 80047ae:	460a      	mov	r2, r1
 80047b0:	4601      	mov	r1, r0
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f000 b802 	b.w	80047bc <_calloc_r>
 80047b8:	2000000c 	.word	0x2000000c

080047bc <_calloc_r>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	fba1 5402 	umull	r5, r4, r1, r2
 80047c2:	b93c      	cbnz	r4, 80047d4 <_calloc_r+0x18>
 80047c4:	4629      	mov	r1, r5
 80047c6:	f000 f837 	bl	8004838 <_malloc_r>
 80047ca:	4606      	mov	r6, r0
 80047cc:	b928      	cbnz	r0, 80047da <_calloc_r+0x1e>
 80047ce:	2600      	movs	r6, #0
 80047d0:	4630      	mov	r0, r6
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	220c      	movs	r2, #12
 80047d6:	6002      	str	r2, [r0, #0]
 80047d8:	e7f9      	b.n	80047ce <_calloc_r+0x12>
 80047da:	462a      	mov	r2, r5
 80047dc:	4621      	mov	r1, r4
 80047de:	f000 f93b 	bl	8004a58 <memset>
 80047e2:	e7f5      	b.n	80047d0 <_calloc_r+0x14>

080047e4 <free>:
 80047e4:	4b02      	ldr	r3, [pc, #8]	@ (80047f0 <free+0xc>)
 80047e6:	4601      	mov	r1, r0
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	f000 b987 	b.w	8004afc <_free_r>
 80047ee:	bf00      	nop
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <sbrk_aligned>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004834 <sbrk_aligned+0x40>)
 80047f8:	460c      	mov	r4, r1
 80047fa:	6831      	ldr	r1, [r6, #0]
 80047fc:	4605      	mov	r5, r0
 80047fe:	b911      	cbnz	r1, 8004806 <sbrk_aligned+0x12>
 8004800:	f000 f932 	bl	8004a68 <_sbrk_r>
 8004804:	6030      	str	r0, [r6, #0]
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f92d 	bl	8004a68 <_sbrk_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d103      	bne.n	800481a <sbrk_aligned+0x26>
 8004812:	f04f 34ff 	mov.w	r4, #4294967295
 8004816:	4620      	mov	r0, r4
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	1cc4      	adds	r4, r0, #3
 800481c:	f024 0403 	bic.w	r4, r4, #3
 8004820:	42a0      	cmp	r0, r4
 8004822:	d0f8      	beq.n	8004816 <sbrk_aligned+0x22>
 8004824:	1a21      	subs	r1, r4, r0
 8004826:	4628      	mov	r0, r5
 8004828:	f000 f91e 	bl	8004a68 <_sbrk_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d1f2      	bne.n	8004816 <sbrk_aligned+0x22>
 8004830:	e7ef      	b.n	8004812 <sbrk_aligned+0x1e>
 8004832:	bf00      	nop
 8004834:	20000240 	.word	0x20000240

08004838 <_malloc_r>:
 8004838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800483c:	1ccd      	adds	r5, r1, #3
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	2d00      	cmp	r5, #0
 800484c:	4606      	mov	r6, r0
 800484e:	db01      	blt.n	8004854 <_malloc_r+0x1c>
 8004850:	42a9      	cmp	r1, r5
 8004852:	d904      	bls.n	800485e <_malloc_r+0x26>
 8004854:	230c      	movs	r3, #12
 8004856:	6033      	str	r3, [r6, #0]
 8004858:	2000      	movs	r0, #0
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004934 <_malloc_r+0xfc>
 8004862:	f000 f869 	bl	8004938 <__malloc_lock>
 8004866:	f8d8 3000 	ldr.w	r3, [r8]
 800486a:	461c      	mov	r4, r3
 800486c:	bb44      	cbnz	r4, 80048c0 <_malloc_r+0x88>
 800486e:	4629      	mov	r1, r5
 8004870:	4630      	mov	r0, r6
 8004872:	f7ff ffbf 	bl	80047f4 <sbrk_aligned>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	4604      	mov	r4, r0
 800487a:	d158      	bne.n	800492e <_malloc_r+0xf6>
 800487c:	f8d8 4000 	ldr.w	r4, [r8]
 8004880:	4627      	mov	r7, r4
 8004882:	2f00      	cmp	r7, #0
 8004884:	d143      	bne.n	800490e <_malloc_r+0xd6>
 8004886:	2c00      	cmp	r4, #0
 8004888:	d04b      	beq.n	8004922 <_malloc_r+0xea>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	4639      	mov	r1, r7
 800488e:	4630      	mov	r0, r6
 8004890:	eb04 0903 	add.w	r9, r4, r3
 8004894:	f000 f8e8 	bl	8004a68 <_sbrk_r>
 8004898:	4581      	cmp	r9, r0
 800489a:	d142      	bne.n	8004922 <_malloc_r+0xea>
 800489c:	6821      	ldr	r1, [r4, #0]
 800489e:	1a6d      	subs	r5, r5, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff ffa6 	bl	80047f4 <sbrk_aligned>
 80048a8:	3001      	adds	r0, #1
 80048aa:	d03a      	beq.n	8004922 <_malloc_r+0xea>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	442b      	add	r3, r5
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	f8d8 3000 	ldr.w	r3, [r8]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	bb62      	cbnz	r2, 8004914 <_malloc_r+0xdc>
 80048ba:	f8c8 7000 	str.w	r7, [r8]
 80048be:	e00f      	b.n	80048e0 <_malloc_r+0xa8>
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	1b52      	subs	r2, r2, r5
 80048c4:	d420      	bmi.n	8004908 <_malloc_r+0xd0>
 80048c6:	2a0b      	cmp	r2, #11
 80048c8:	d917      	bls.n	80048fa <_malloc_r+0xc2>
 80048ca:	1961      	adds	r1, r4, r5
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	6025      	str	r5, [r4, #0]
 80048d0:	bf18      	it	ne
 80048d2:	6059      	strne	r1, [r3, #4]
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	bf08      	it	eq
 80048d8:	f8c8 1000 	streq.w	r1, [r8]
 80048dc:	5162      	str	r2, [r4, r5]
 80048de:	604b      	str	r3, [r1, #4]
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 f82f 	bl	8004944 <__malloc_unlock>
 80048e6:	f104 000b 	add.w	r0, r4, #11
 80048ea:	1d23      	adds	r3, r4, #4
 80048ec:	f020 0007 	bic.w	r0, r0, #7
 80048f0:	1ac2      	subs	r2, r0, r3
 80048f2:	bf1c      	itt	ne
 80048f4:	1a1b      	subne	r3, r3, r0
 80048f6:	50a3      	strne	r3, [r4, r2]
 80048f8:	e7af      	b.n	800485a <_malloc_r+0x22>
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	bf0c      	ite	eq
 8004900:	f8c8 2000 	streq.w	r2, [r8]
 8004904:	605a      	strne	r2, [r3, #4]
 8004906:	e7eb      	b.n	80048e0 <_malloc_r+0xa8>
 8004908:	4623      	mov	r3, r4
 800490a:	6864      	ldr	r4, [r4, #4]
 800490c:	e7ae      	b.n	800486c <_malloc_r+0x34>
 800490e:	463c      	mov	r4, r7
 8004910:	687f      	ldr	r7, [r7, #4]
 8004912:	e7b6      	b.n	8004882 <_malloc_r+0x4a>
 8004914:	461a      	mov	r2, r3
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	42a3      	cmp	r3, r4
 800491a:	d1fb      	bne.n	8004914 <_malloc_r+0xdc>
 800491c:	2300      	movs	r3, #0
 800491e:	6053      	str	r3, [r2, #4]
 8004920:	e7de      	b.n	80048e0 <_malloc_r+0xa8>
 8004922:	230c      	movs	r3, #12
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	4630      	mov	r0, r6
 8004928:	f000 f80c 	bl	8004944 <__malloc_unlock>
 800492c:	e794      	b.n	8004858 <_malloc_r+0x20>
 800492e:	6005      	str	r5, [r0, #0]
 8004930:	e7d6      	b.n	80048e0 <_malloc_r+0xa8>
 8004932:	bf00      	nop
 8004934:	20000244 	.word	0x20000244

08004938 <__malloc_lock>:
 8004938:	4801      	ldr	r0, [pc, #4]	@ (8004940 <__malloc_lock+0x8>)
 800493a:	f000 b8cf 	b.w	8004adc <__retarget_lock_acquire_recursive>
 800493e:	bf00      	nop
 8004940:	20000384 	.word	0x20000384

08004944 <__malloc_unlock>:
 8004944:	4801      	ldr	r0, [pc, #4]	@ (800494c <__malloc_unlock+0x8>)
 8004946:	f000 b8ca 	b.w	8004ade <__retarget_lock_release_recursive>
 800494a:	bf00      	nop
 800494c:	20000384 	.word	0x20000384

08004950 <_strtol_l.constprop.0>:
 8004950:	2b24      	cmp	r3, #36	@ 0x24
 8004952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004956:	4686      	mov	lr, r0
 8004958:	4690      	mov	r8, r2
 800495a:	d801      	bhi.n	8004960 <_strtol_l.constprop.0+0x10>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d106      	bne.n	800496e <_strtol_l.constprop.0+0x1e>
 8004960:	f000 f892 	bl	8004a88 <__errno>
 8004964:	2316      	movs	r3, #22
 8004966:	6003      	str	r3, [r0, #0]
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	4834      	ldr	r0, [pc, #208]	@ (8004a40 <_strtol_l.constprop.0+0xf0>)
 8004970:	460d      	mov	r5, r1
 8004972:	462a      	mov	r2, r5
 8004974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004978:	5d06      	ldrb	r6, [r0, r4]
 800497a:	f016 0608 	ands.w	r6, r6, #8
 800497e:	d1f8      	bne.n	8004972 <_strtol_l.constprop.0+0x22>
 8004980:	2c2d      	cmp	r4, #45	@ 0x2d
 8004982:	d12d      	bne.n	80049e0 <_strtol_l.constprop.0+0x90>
 8004984:	782c      	ldrb	r4, [r5, #0]
 8004986:	2601      	movs	r6, #1
 8004988:	1c95      	adds	r5, r2, #2
 800498a:	f033 0210 	bics.w	r2, r3, #16
 800498e:	d109      	bne.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004990:	2c30      	cmp	r4, #48	@ 0x30
 8004992:	d12a      	bne.n	80049ea <_strtol_l.constprop.0+0x9a>
 8004994:	782a      	ldrb	r2, [r5, #0]
 8004996:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800499a:	2a58      	cmp	r2, #88	@ 0x58
 800499c:	d125      	bne.n	80049ea <_strtol_l.constprop.0+0x9a>
 800499e:	786c      	ldrb	r4, [r5, #1]
 80049a0:	2310      	movs	r3, #16
 80049a2:	3502      	adds	r5, #2
 80049a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80049a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80049ac:	2200      	movs	r2, #0
 80049ae:	fbbc f9f3 	udiv	r9, ip, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80049b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80049bc:	2f09      	cmp	r7, #9
 80049be:	d81b      	bhi.n	80049f8 <_strtol_l.constprop.0+0xa8>
 80049c0:	463c      	mov	r4, r7
 80049c2:	42a3      	cmp	r3, r4
 80049c4:	dd27      	ble.n	8004a16 <_strtol_l.constprop.0+0xc6>
 80049c6:	1c57      	adds	r7, r2, #1
 80049c8:	d007      	beq.n	80049da <_strtol_l.constprop.0+0x8a>
 80049ca:	4581      	cmp	r9, r0
 80049cc:	d320      	bcc.n	8004a10 <_strtol_l.constprop.0+0xc0>
 80049ce:	d101      	bne.n	80049d4 <_strtol_l.constprop.0+0x84>
 80049d0:	45a2      	cmp	sl, r4
 80049d2:	db1d      	blt.n	8004a10 <_strtol_l.constprop.0+0xc0>
 80049d4:	fb00 4003 	mla	r0, r0, r3, r4
 80049d8:	2201      	movs	r2, #1
 80049da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049de:	e7eb      	b.n	80049b8 <_strtol_l.constprop.0+0x68>
 80049e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80049e2:	bf04      	itt	eq
 80049e4:	782c      	ldrbeq	r4, [r5, #0]
 80049e6:	1c95      	addeq	r5, r2, #2
 80049e8:	e7cf      	b.n	800498a <_strtol_l.constprop.0+0x3a>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1da      	bne.n	80049a4 <_strtol_l.constprop.0+0x54>
 80049ee:	2c30      	cmp	r4, #48	@ 0x30
 80049f0:	bf0c      	ite	eq
 80049f2:	2308      	moveq	r3, #8
 80049f4:	230a      	movne	r3, #10
 80049f6:	e7d5      	b.n	80049a4 <_strtol_l.constprop.0+0x54>
 80049f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80049fc:	2f19      	cmp	r7, #25
 80049fe:	d801      	bhi.n	8004a04 <_strtol_l.constprop.0+0xb4>
 8004a00:	3c37      	subs	r4, #55	@ 0x37
 8004a02:	e7de      	b.n	80049c2 <_strtol_l.constprop.0+0x72>
 8004a04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004a08:	2f19      	cmp	r7, #25
 8004a0a:	d804      	bhi.n	8004a16 <_strtol_l.constprop.0+0xc6>
 8004a0c:	3c57      	subs	r4, #87	@ 0x57
 8004a0e:	e7d8      	b.n	80049c2 <_strtol_l.constprop.0+0x72>
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	e7e1      	b.n	80049da <_strtol_l.constprop.0+0x8a>
 8004a16:	1c53      	adds	r3, r2, #1
 8004a18:	d108      	bne.n	8004a2c <_strtol_l.constprop.0+0xdc>
 8004a1a:	2322      	movs	r3, #34	@ 0x22
 8004a1c:	f8ce 3000 	str.w	r3, [lr]
 8004a20:	4660      	mov	r0, ip
 8004a22:	f1b8 0f00 	cmp.w	r8, #0
 8004a26:	d0a0      	beq.n	800496a <_strtol_l.constprop.0+0x1a>
 8004a28:	1e69      	subs	r1, r5, #1
 8004a2a:	e006      	b.n	8004a3a <_strtol_l.constprop.0+0xea>
 8004a2c:	b106      	cbz	r6, 8004a30 <_strtol_l.constprop.0+0xe0>
 8004a2e:	4240      	negs	r0, r0
 8004a30:	f1b8 0f00 	cmp.w	r8, #0
 8004a34:	d099      	beq.n	800496a <_strtol_l.constprop.0+0x1a>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d1f6      	bne.n	8004a28 <_strtol_l.constprop.0+0xd8>
 8004a3a:	f8c8 1000 	str.w	r1, [r8]
 8004a3e:	e794      	b.n	800496a <_strtol_l.constprop.0+0x1a>
 8004a40:	0800563d 	.word	0x0800563d

08004a44 <strtol>:
 8004a44:	4613      	mov	r3, r2
 8004a46:	460a      	mov	r2, r1
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4802      	ldr	r0, [pc, #8]	@ (8004a54 <strtol+0x10>)
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f7ff bf7f 	b.w	8004950 <_strtol_l.constprop.0>
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <_sbrk_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d06      	ldr	r5, [pc, #24]	@ (8004a84 <_sbrk_r+0x1c>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	f7fc fa10 	bl	8000e98 <_sbrk>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_sbrk_r+0x1a>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_sbrk_r+0x1a>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000380 	.word	0x20000380

08004a88 <__errno>:
 8004a88:	4b01      	ldr	r3, [pc, #4]	@ (8004a90 <__errno+0x8>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	2000000c 	.word	0x2000000c

08004a94 <__libc_init_array>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4d0d      	ldr	r5, [pc, #52]	@ (8004acc <__libc_init_array+0x38>)
 8004a98:	4c0d      	ldr	r4, [pc, #52]	@ (8004ad0 <__libc_init_array+0x3c>)
 8004a9a:	1b64      	subs	r4, r4, r5
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	42a6      	cmp	r6, r4
 8004aa2:	d109      	bne.n	8004ab8 <__libc_init_array+0x24>
 8004aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ad4 <__libc_init_array+0x40>)
 8004aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ad8 <__libc_init_array+0x44>)
 8004aa8:	f000 fdac 	bl	8005604 <_init>
 8004aac:	1b64      	subs	r4, r4, r5
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	d105      	bne.n	8004ac2 <__libc_init_array+0x2e>
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abc:	4798      	blx	r3
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7ee      	b.n	8004aa0 <__libc_init_array+0xc>
 8004ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac6:	4798      	blx	r3
 8004ac8:	3601      	adds	r6, #1
 8004aca:	e7f2      	b.n	8004ab2 <__libc_init_array+0x1e>
 8004acc:	08005b18 	.word	0x08005b18
 8004ad0:	08005b18 	.word	0x08005b18
 8004ad4:	08005b18 	.word	0x08005b18
 8004ad8:	08005b1c 	.word	0x08005b1c

08004adc <__retarget_lock_acquire_recursive>:
 8004adc:	4770      	bx	lr

08004ade <__retarget_lock_release_recursive>:
 8004ade:	4770      	bx	lr

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <_free_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d041      	beq.n	8004b88 <_free_r+0x8c>
 8004b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b08:	1f0c      	subs	r4, r1, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bfb8      	it	lt
 8004b0e:	18e4      	addlt	r4, r4, r3
 8004b10:	f7ff ff12 	bl	8004938 <__malloc_lock>
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <_free_r+0x90>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	b933      	cbnz	r3, 8004b28 <_free_r+0x2c>
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	6014      	str	r4, [r2, #0]
 8004b1e:	4628      	mov	r0, r5
 8004b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b24:	f7ff bf0e 	b.w	8004944 <__malloc_unlock>
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	d908      	bls.n	8004b3e <_free_r+0x42>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	1821      	adds	r1, r4, r0
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf01      	itttt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	1809      	addeq	r1, r1, r0
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	e7ed      	b.n	8004b1a <_free_r+0x1e>
 8004b3e:	461a      	mov	r2, r3
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b10b      	cbz	r3, 8004b48 <_free_r+0x4c>
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d9fa      	bls.n	8004b3e <_free_r+0x42>
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	1850      	adds	r0, r2, r1
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d10b      	bne.n	8004b68 <_free_r+0x6c>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	4401      	add	r1, r0
 8004b54:	1850      	adds	r0, r2, r1
 8004b56:	4283      	cmp	r3, r0
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	d1e0      	bne.n	8004b1e <_free_r+0x22>
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	4408      	add	r0, r1
 8004b64:	6010      	str	r0, [r2, #0]
 8004b66:	e7da      	b.n	8004b1e <_free_r+0x22>
 8004b68:	d902      	bls.n	8004b70 <_free_r+0x74>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	e7d6      	b.n	8004b1e <_free_r+0x22>
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	1821      	adds	r1, r4, r0
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf04      	itt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	bf04      	itt	eq
 8004b80:	1809      	addeq	r1, r1, r0
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	6054      	str	r4, [r2, #4]
 8004b86:	e7ca      	b.n	8004b1e <_free_r+0x22>
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000244 	.word	0x20000244

08004b90 <sinf>:
 8004b90:	ee10 3a10 	vmov	r3, s0
 8004b94:	b507      	push	{r0, r1, r2, lr}
 8004b96:	4a1f      	ldr	r2, [pc, #124]	@ (8004c14 <sinf+0x84>)
 8004b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d807      	bhi.n	8004bb0 <sinf+0x20>
 8004ba0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004c18 <sinf+0x88>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	b003      	add	sp, #12
 8004ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bac:	f000 b88e 	b.w	8004ccc <__kernel_sinf>
 8004bb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004bb4:	d304      	bcc.n	8004bc0 <sinf+0x30>
 8004bb6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004bba:	b003      	add	sp, #12
 8004bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc0:	4668      	mov	r0, sp
 8004bc2:	f000 f8cb 	bl	8004d5c <__ieee754_rem_pio2f>
 8004bc6:	f000 0003 	and.w	r0, r0, #3
 8004bca:	2801      	cmp	r0, #1
 8004bcc:	d00a      	beq.n	8004be4 <sinf+0x54>
 8004bce:	2802      	cmp	r0, #2
 8004bd0:	d00f      	beq.n	8004bf2 <sinf+0x62>
 8004bd2:	b9c0      	cbnz	r0, 8004c06 <sinf+0x76>
 8004bd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004bd8:	ed9d 0a00 	vldr	s0, [sp]
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f000 f875 	bl	8004ccc <__kernel_sinf>
 8004be2:	e7ea      	b.n	8004bba <sinf+0x2a>
 8004be4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004be8:	ed9d 0a00 	vldr	s0, [sp]
 8004bec:	f000 f816 	bl	8004c1c <__kernel_cosf>
 8004bf0:	e7e3      	b.n	8004bba <sinf+0x2a>
 8004bf2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004bf6:	ed9d 0a00 	vldr	s0, [sp]
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f000 f866 	bl	8004ccc <__kernel_sinf>
 8004c00:	eeb1 0a40 	vneg.f32	s0, s0
 8004c04:	e7d9      	b.n	8004bba <sinf+0x2a>
 8004c06:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c0a:	ed9d 0a00 	vldr	s0, [sp]
 8004c0e:	f000 f805 	bl	8004c1c <__kernel_cosf>
 8004c12:	e7f5      	b.n	8004c00 <sinf+0x70>
 8004c14:	3f490fd8 	.word	0x3f490fd8
 8004c18:	00000000 	.word	0x00000000

08004c1c <__kernel_cosf>:
 8004c1c:	ee10 3a10 	vmov	r3, s0
 8004c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c24:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004c28:	eef0 6a40 	vmov.f32	s13, s0
 8004c2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004c30:	d204      	bcs.n	8004c3c <__kernel_cosf+0x20>
 8004c32:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	b342      	cbz	r2, 8004c8e <__kernel_cosf+0x72>
 8004c3c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004c40:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004cac <__kernel_cosf+0x90>
 8004c44:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004cb0 <__kernel_cosf+0x94>
 8004c48:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <__kernel_cosf+0x98>)
 8004c4a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004cb8 <__kernel_cosf+0x9c>
 8004c54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004c58:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004cbc <__kernel_cosf+0xa0>
 8004c5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004c60:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004cc0 <__kernel_cosf+0xa4>
 8004c64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004c68:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004cc4 <__kernel_cosf+0xa8>
 8004c6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004c70:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004c74:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004c78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004c7c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c84:	d804      	bhi.n	8004c90 <__kernel_cosf+0x74>
 8004c86:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004c8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c8e:	4770      	bx	lr
 8004c90:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc8 <__kernel_cosf+0xac>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	bf9a      	itte	ls
 8004c96:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004c9a:	ee07 3a10 	vmovls	s14, r3
 8004c9e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004ca2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004caa:	e7ec      	b.n	8004c86 <__kernel_cosf+0x6a>
 8004cac:	ad47d74e 	.word	0xad47d74e
 8004cb0:	310f74f6 	.word	0x310f74f6
 8004cb4:	3e999999 	.word	0x3e999999
 8004cb8:	b493f27c 	.word	0xb493f27c
 8004cbc:	37d00d01 	.word	0x37d00d01
 8004cc0:	bab60b61 	.word	0xbab60b61
 8004cc4:	3d2aaaab 	.word	0x3d2aaaab
 8004cc8:	3f480000 	.word	0x3f480000

08004ccc <__kernel_sinf>:
 8004ccc:	ee10 3a10 	vmov	r3, s0
 8004cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cd4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004cd8:	d204      	bcs.n	8004ce4 <__kernel_sinf+0x18>
 8004cda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cde:	ee17 3a90 	vmov	r3, s15
 8004ce2:	b35b      	cbz	r3, 8004d3c <__kernel_sinf+0x70>
 8004ce4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ce8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004d40 <__kernel_sinf+0x74>
 8004cec:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004d44 <__kernel_sinf+0x78>
 8004cf0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cf4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004d48 <__kernel_sinf+0x7c>
 8004cf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004cfc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004d4c <__kernel_sinf+0x80>
 8004d00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d04:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004d50 <__kernel_sinf+0x84>
 8004d08:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004d0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d10:	b930      	cbnz	r0, 8004d20 <__kernel_sinf+0x54>
 8004d12:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004d54 <__kernel_sinf+0x88>
 8004d16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004d1e:	4770      	bx	lr
 8004d20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d24:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004d28:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d30:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004d58 <__kernel_sinf+0x8c>
 8004d34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d38:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d44:	b2d72f34 	.word	0xb2d72f34
 8004d48:	3638ef1b 	.word	0x3638ef1b
 8004d4c:	b9500d01 	.word	0xb9500d01
 8004d50:	3c088889 	.word	0x3c088889
 8004d54:	be2aaaab 	.word	0xbe2aaaab
 8004d58:	3e2aaaab 	.word	0x3e2aaaab

08004d5c <__ieee754_rem_pio2f>:
 8004d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5e:	ee10 6a10 	vmov	r6, s0
 8004d62:	4b88      	ldr	r3, [pc, #544]	@ (8004f84 <__ieee754_rem_pio2f+0x228>)
 8004d64:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004d68:	429d      	cmp	r5, r3
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	d805      	bhi.n	8004d7c <__ieee754_rem_pio2f+0x20>
 8004d70:	2300      	movs	r3, #0
 8004d72:	ed80 0a00 	vstr	s0, [r0]
 8004d76:	6043      	str	r3, [r0, #4]
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e022      	b.n	8004dc2 <__ieee754_rem_pio2f+0x66>
 8004d7c:	4b82      	ldr	r3, [pc, #520]	@ (8004f88 <__ieee754_rem_pio2f+0x22c>)
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	d83a      	bhi.n	8004df8 <__ieee754_rem_pio2f+0x9c>
 8004d82:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004f8c <__ieee754_rem_pio2f+0x230>
 8004d8c:	4a80      	ldr	r2, [pc, #512]	@ (8004f90 <__ieee754_rem_pio2f+0x234>)
 8004d8e:	f023 030f 	bic.w	r3, r3, #15
 8004d92:	dd18      	ble.n	8004dc6 <__ieee754_rem_pio2f+0x6a>
 8004d94:	4293      	cmp	r3, r2
 8004d96:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004d9a:	bf09      	itett	eq
 8004d9c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004f94 <__ieee754_rem_pio2f+0x238>
 8004da0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004f98 <__ieee754_rem_pio2f+0x23c>
 8004da4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004f9c <__ieee754_rem_pio2f+0x240>
 8004da8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004dac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004db0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004db4:	ed80 7a00 	vstr	s14, [r0]
 8004db8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004dbc:	edc0 7a01 	vstr	s15, [r0, #4]
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	b007      	add	sp, #28
 8004dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004dcc:	bf09      	itett	eq
 8004dce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004f94 <__ieee754_rem_pio2f+0x238>
 8004dd2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004f98 <__ieee754_rem_pio2f+0x23c>
 8004dd6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004f9c <__ieee754_rem_pio2f+0x240>
 8004dda:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004dde:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004de6:	ed80 7a00 	vstr	s14, [r0]
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	edc0 7a01 	vstr	s15, [r0, #4]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e7e4      	b.n	8004dc2 <__ieee754_rem_pio2f+0x66>
 8004df8:	4b69      	ldr	r3, [pc, #420]	@ (8004fa0 <__ieee754_rem_pio2f+0x244>)
 8004dfa:	429d      	cmp	r5, r3
 8004dfc:	d873      	bhi.n	8004ee6 <__ieee754_rem_pio2f+0x18a>
 8004dfe:	f000 f8dd 	bl	8004fbc <fabsf>
 8004e02:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004fa4 <__ieee754_rem_pio2f+0x248>
 8004e06:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004e0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e16:	ee17 0a90 	vmov	r0, s15
 8004e1a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004f8c <__ieee754_rem_pio2f+0x230>
 8004e1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004e22:	281f      	cmp	r0, #31
 8004e24:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004f98 <__ieee754_rem_pio2f+0x23c>
 8004e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2c:	eeb1 6a47 	vneg.f32	s12, s14
 8004e30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004e34:	ee16 1a90 	vmov	r1, s13
 8004e38:	dc09      	bgt.n	8004e4e <__ieee754_rem_pio2f+0xf2>
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <__ieee754_rem_pio2f+0x24c>)
 8004e3c:	1e47      	subs	r7, r0, #1
 8004e3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004e42:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d107      	bne.n	8004e5e <__ieee754_rem_pio2f+0x102>
 8004e4e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004e52:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8004e56:	2a08      	cmp	r2, #8
 8004e58:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004e5c:	dc14      	bgt.n	8004e88 <__ieee754_rem_pio2f+0x12c>
 8004e5e:	6021      	str	r1, [r4, #0]
 8004e60:	ed94 7a00 	vldr	s14, [r4]
 8004e64:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e6e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004e72:	daa6      	bge.n	8004dc2 <__ieee754_rem_pio2f+0x66>
 8004e74:	eeb1 7a47 	vneg.f32	s14, s14
 8004e78:	eeb1 0a40 	vneg.f32	s0, s0
 8004e7c:	ed84 7a00 	vstr	s14, [r4]
 8004e80:	ed84 0a01 	vstr	s0, [r4, #4]
 8004e84:	4240      	negs	r0, r0
 8004e86:	e79c      	b.n	8004dc2 <__ieee754_rem_pio2f+0x66>
 8004e88:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004f94 <__ieee754_rem_pio2f+0x238>
 8004e8c:	eef0 6a40 	vmov.f32	s13, s0
 8004e90:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004e94:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004e98:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004e9c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f9c <__ieee754_rem_pio2f+0x240>
 8004ea0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004ea4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004ea8:	ee15 2a90 	vmov	r2, s11
 8004eac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004eb0:	1a5b      	subs	r3, r3, r1
 8004eb2:	2b19      	cmp	r3, #25
 8004eb4:	dc04      	bgt.n	8004ec0 <__ieee754_rem_pio2f+0x164>
 8004eb6:	edc4 5a00 	vstr	s11, [r4]
 8004eba:	eeb0 0a66 	vmov.f32	s0, s13
 8004ebe:	e7cf      	b.n	8004e60 <__ieee754_rem_pio2f+0x104>
 8004ec0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004fac <__ieee754_rem_pio2f+0x250>
 8004ec4:	eeb0 0a66 	vmov.f32	s0, s13
 8004ec8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004ecc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004ed0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004fb0 <__ieee754_rem_pio2f+0x254>
 8004ed4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004ed8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004edc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004ee0:	ed84 7a00 	vstr	s14, [r4]
 8004ee4:	e7bc      	b.n	8004e60 <__ieee754_rem_pio2f+0x104>
 8004ee6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004eea:	d306      	bcc.n	8004efa <__ieee754_rem_pio2f+0x19e>
 8004eec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004ef0:	edc0 7a01 	vstr	s15, [r0, #4]
 8004ef4:	edc0 7a00 	vstr	s15, [r0]
 8004ef8:	e73e      	b.n	8004d78 <__ieee754_rem_pio2f+0x1c>
 8004efa:	15ea      	asrs	r2, r5, #23
 8004efc:	3a86      	subs	r2, #134	@ 0x86
 8004efe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004f0a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004fb4 <__ieee754_rem_pio2f+0x258>
 8004f0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f16:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004f1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004f22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f2a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004f2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	edcd 7a05 	vstr	s15, [sp, #20]
 8004f3e:	d11e      	bne.n	8004f7e <__ieee754_rem_pio2f+0x222>
 8004f40:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2302      	movne	r3, #2
 8004f4e:	491a      	ldr	r1, [pc, #104]	@ (8004fb8 <__ieee754_rem_pio2f+0x25c>)
 8004f50:	9101      	str	r1, [sp, #4]
 8004f52:	2102      	movs	r1, #2
 8004f54:	9100      	str	r1, [sp, #0]
 8004f56:	a803      	add	r0, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	f000 f837 	bl	8004fcc <__kernel_rem_pio2f>
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	f6bf af2f 	bge.w	8004dc2 <__ieee754_rem_pio2f+0x66>
 8004f64:	edd4 7a00 	vldr	s15, [r4]
 8004f68:	eef1 7a67 	vneg.f32	s15, s15
 8004f6c:	edc4 7a00 	vstr	s15, [r4]
 8004f70:	edd4 7a01 	vldr	s15, [r4, #4]
 8004f74:	eef1 7a67 	vneg.f32	s15, s15
 8004f78:	edc4 7a01 	vstr	s15, [r4, #4]
 8004f7c:	e782      	b.n	8004e84 <__ieee754_rem_pio2f+0x128>
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e7e5      	b.n	8004f4e <__ieee754_rem_pio2f+0x1f2>
 8004f82:	bf00      	nop
 8004f84:	3f490fd8 	.word	0x3f490fd8
 8004f88:	4016cbe3 	.word	0x4016cbe3
 8004f8c:	3fc90f80 	.word	0x3fc90f80
 8004f90:	3fc90fd0 	.word	0x3fc90fd0
 8004f94:	37354400 	.word	0x37354400
 8004f98:	37354443 	.word	0x37354443
 8004f9c:	2e85a308 	.word	0x2e85a308
 8004fa0:	43490f80 	.word	0x43490f80
 8004fa4:	3f22f984 	.word	0x3f22f984
 8004fa8:	08005740 	.word	0x08005740
 8004fac:	2e85a300 	.word	0x2e85a300
 8004fb0:	248d3132 	.word	0x248d3132
 8004fb4:	43800000 	.word	0x43800000
 8004fb8:	080057c0 	.word	0x080057c0

08004fbc <fabsf>:
 8004fbc:	ee10 3a10 	vmov	r3, s0
 8004fc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fc4:	ee00 3a10 	vmov	s0, r3
 8004fc8:	4770      	bx	lr
	...

08004fcc <__kernel_rem_pio2f>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	ed2d 8b04 	vpush	{d8-d9}
 8004fd4:	b0d9      	sub	sp, #356	@ 0x164
 8004fd6:	4690      	mov	r8, r2
 8004fd8:	9001      	str	r0, [sp, #4]
 8004fda:	4ab9      	ldr	r2, [pc, #740]	@ (80052c0 <__kernel_rem_pio2f+0x2f4>)
 8004fdc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004fde:	f118 0f04 	cmn.w	r8, #4
 8004fe2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fec:	db27      	blt.n	800503e <__kernel_rem_pio2f+0x72>
 8004fee:	f1b8 0203 	subs.w	r2, r8, #3
 8004ff2:	bf48      	it	mi
 8004ff4:	f108 0204 	addmi.w	r2, r8, #4
 8004ff8:	10d2      	asrs	r2, r2, #3
 8004ffa:	1c55      	adds	r5, r2, #1
 8004ffc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004ffe:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 8005002:	00e8      	lsls	r0, r5, #3
 8005004:	eba2 060b 	sub.w	r6, r2, fp
 8005008:	9002      	str	r0, [sp, #8]
 800500a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800500e:	eb0a 0c0b 	add.w	ip, sl, fp
 8005012:	ac1c      	add	r4, sp, #112	@ 0x70
 8005014:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005018:	2000      	movs	r0, #0
 800501a:	4560      	cmp	r0, ip
 800501c:	dd11      	ble.n	8005042 <__kernel_rem_pio2f+0x76>
 800501e:	a91c      	add	r1, sp, #112	@ 0x70
 8005020:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005024:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005028:	f04f 0c00 	mov.w	ip, #0
 800502c:	45d4      	cmp	ip, sl
 800502e:	dc27      	bgt.n	8005080 <__kernel_rem_pio2f+0xb4>
 8005030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005034:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 8005038:	4606      	mov	r6, r0
 800503a:	2400      	movs	r4, #0
 800503c:	e016      	b.n	800506c <__kernel_rem_pio2f+0xa0>
 800503e:	2200      	movs	r2, #0
 8005040:	e7db      	b.n	8004ffa <__kernel_rem_pio2f+0x2e>
 8005042:	42c6      	cmn	r6, r0
 8005044:	bf5d      	ittte	pl
 8005046:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800504a:	ee07 1a90 	vmovpl	s15, r1
 800504e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005052:	eef0 7a47 	vmovmi.f32	s15, s14
 8005056:	ece4 7a01 	vstmia	r4!, {s15}
 800505a:	3001      	adds	r0, #1
 800505c:	e7dd      	b.n	800501a <__kernel_rem_pio2f+0x4e>
 800505e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005062:	ed96 7a00 	vldr	s14, [r6]
 8005066:	eee6 7a87 	vfma.f32	s15, s13, s14
 800506a:	3401      	adds	r4, #1
 800506c:	455c      	cmp	r4, fp
 800506e:	f1a6 0604 	sub.w	r6, r6, #4
 8005072:	ddf4      	ble.n	800505e <__kernel_rem_pio2f+0x92>
 8005074:	ece9 7a01 	vstmia	r9!, {s15}
 8005078:	f10c 0c01 	add.w	ip, ip, #1
 800507c:	3004      	adds	r0, #4
 800507e:	e7d5      	b.n	800502c <__kernel_rem_pio2f+0x60>
 8005080:	a908      	add	r1, sp, #32
 8005082:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005086:	9104      	str	r1, [sp, #16]
 8005088:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800508a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80052cc <__kernel_rem_pio2f+0x300>
 800508e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80052c8 <__kernel_rem_pio2f+0x2fc>
 8005092:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005096:	9203      	str	r2, [sp, #12]
 8005098:	4654      	mov	r4, sl
 800509a:	00a2      	lsls	r2, r4, #2
 800509c:	9205      	str	r2, [sp, #20]
 800509e:	aa58      	add	r2, sp, #352	@ 0x160
 80050a0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80050a4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80050a8:	a944      	add	r1, sp, #272	@ 0x110
 80050aa:	aa08      	add	r2, sp, #32
 80050ac:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80050b0:	4694      	mov	ip, r2
 80050b2:	4626      	mov	r6, r4
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	f1a0 0004 	sub.w	r0, r0, #4
 80050ba:	dc4c      	bgt.n	8005156 <__kernel_rem_pio2f+0x18a>
 80050bc:	4628      	mov	r0, r5
 80050be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050c2:	f000 f9f5 	bl	80054b0 <scalbnf>
 80050c6:	eeb0 8a40 	vmov.f32	s16, s0
 80050ca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80050ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 80050d2:	f000 fa53 	bl	800557c <floorf>
 80050d6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80050da:	eea0 8a67 	vfms.f32	s16, s0, s15
 80050de:	2d00      	cmp	r5, #0
 80050e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80050e8:	ee17 9a90 	vmov	r9, s15
 80050ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80050f4:	dd41      	ble.n	800517a <__kernel_rem_pio2f+0x1ae>
 80050f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80050fa:	a908      	add	r1, sp, #32
 80050fc:	f1c5 0e08 	rsb	lr, r5, #8
 8005100:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005104:	fa46 f00e 	asr.w	r0, r6, lr
 8005108:	4481      	add	r9, r0
 800510a:	fa00 f00e 	lsl.w	r0, r0, lr
 800510e:	1a36      	subs	r6, r6, r0
 8005110:	f1c5 0007 	rsb	r0, r5, #7
 8005114:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005118:	4106      	asrs	r6, r0
 800511a:	2e00      	cmp	r6, #0
 800511c:	dd3c      	ble.n	8005198 <__kernel_rem_pio2f+0x1cc>
 800511e:	f04f 0e00 	mov.w	lr, #0
 8005122:	f109 0901 	add.w	r9, r9, #1
 8005126:	4670      	mov	r0, lr
 8005128:	4574      	cmp	r4, lr
 800512a:	dc68      	bgt.n	80051fe <__kernel_rem_pio2f+0x232>
 800512c:	2d00      	cmp	r5, #0
 800512e:	dd03      	ble.n	8005138 <__kernel_rem_pio2f+0x16c>
 8005130:	2d01      	cmp	r5, #1
 8005132:	d074      	beq.n	800521e <__kernel_rem_pio2f+0x252>
 8005134:	2d02      	cmp	r5, #2
 8005136:	d07d      	beq.n	8005234 <__kernel_rem_pio2f+0x268>
 8005138:	2e02      	cmp	r6, #2
 800513a:	d12d      	bne.n	8005198 <__kernel_rem_pio2f+0x1cc>
 800513c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005140:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005144:	b340      	cbz	r0, 8005198 <__kernel_rem_pio2f+0x1cc>
 8005146:	4628      	mov	r0, r5
 8005148:	9306      	str	r3, [sp, #24]
 800514a:	f000 f9b1 	bl	80054b0 <scalbnf>
 800514e:	9b06      	ldr	r3, [sp, #24]
 8005150:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005154:	e020      	b.n	8005198 <__kernel_rem_pio2f+0x1cc>
 8005156:	ee60 7a28 	vmul.f32	s15, s0, s17
 800515a:	3e01      	subs	r6, #1
 800515c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005164:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005168:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800516c:	ecac 0a01 	vstmia	ip!, {s0}
 8005170:	ed90 0a00 	vldr	s0, [r0]
 8005174:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005178:	e79c      	b.n	80050b4 <__kernel_rem_pio2f+0xe8>
 800517a:	d105      	bne.n	8005188 <__kernel_rem_pio2f+0x1bc>
 800517c:	1e60      	subs	r0, r4, #1
 800517e:	a908      	add	r1, sp, #32
 8005180:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005184:	11f6      	asrs	r6, r6, #7
 8005186:	e7c8      	b.n	800511a <__kernel_rem_pio2f+0x14e>
 8005188:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800518c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	da31      	bge.n	80051fa <__kernel_rem_pio2f+0x22e>
 8005196:	2600      	movs	r6, #0
 8005198:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	f040 8098 	bne.w	80052d4 <__kernel_rem_pio2f+0x308>
 80051a4:	1e60      	subs	r0, r4, #1
 80051a6:	2200      	movs	r2, #0
 80051a8:	4550      	cmp	r0, sl
 80051aa:	da4b      	bge.n	8005244 <__kernel_rem_pio2f+0x278>
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d065      	beq.n	800527c <__kernel_rem_pio2f+0x2b0>
 80051b0:	3c01      	subs	r4, #1
 80051b2:	ab08      	add	r3, sp, #32
 80051b4:	3d08      	subs	r5, #8
 80051b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f8      	beq.n	80051b0 <__kernel_rem_pio2f+0x1e4>
 80051be:	4628      	mov	r0, r5
 80051c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80051c4:	f000 f974 	bl	80054b0 <scalbnf>
 80051c8:	1c63      	adds	r3, r4, #1
 80051ca:	aa44      	add	r2, sp, #272	@ 0x110
 80051cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80052cc <__kernel_rem_pio2f+0x300>
 80051d0:	0099      	lsls	r1, r3, #2
 80051d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80051d6:	4623      	mov	r3, r4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f280 80a9 	bge.w	8005330 <__kernel_rem_pio2f+0x364>
 80051de:	4623      	mov	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f2c0 80c7 	blt.w	8005374 <__kernel_rem_pio2f+0x3a8>
 80051e6:	aa44      	add	r2, sp, #272	@ 0x110
 80051e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80051ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80052c4 <__kernel_rem_pio2f+0x2f8>
 80051f0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 80051f4:	2000      	movs	r0, #0
 80051f6:	1ae2      	subs	r2, r4, r3
 80051f8:	e0b1      	b.n	800535e <__kernel_rem_pio2f+0x392>
 80051fa:	2602      	movs	r6, #2
 80051fc:	e78f      	b.n	800511e <__kernel_rem_pio2f+0x152>
 80051fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8005202:	b948      	cbnz	r0, 8005218 <__kernel_rem_pio2f+0x24c>
 8005204:	b121      	cbz	r1, 8005210 <__kernel_rem_pio2f+0x244>
 8005206:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800520a:	f842 1c04 	str.w	r1, [r2, #-4]
 800520e:	2101      	movs	r1, #1
 8005210:	f10e 0e01 	add.w	lr, lr, #1
 8005214:	4608      	mov	r0, r1
 8005216:	e787      	b.n	8005128 <__kernel_rem_pio2f+0x15c>
 8005218:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800521c:	e7f5      	b.n	800520a <__kernel_rem_pio2f+0x23e>
 800521e:	f104 3cff 	add.w	ip, r4, #4294967295
 8005222:	aa08      	add	r2, sp, #32
 8005224:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005228:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800522c:	a908      	add	r1, sp, #32
 800522e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005232:	e781      	b.n	8005138 <__kernel_rem_pio2f+0x16c>
 8005234:	f104 3cff 	add.w	ip, r4, #4294967295
 8005238:	aa08      	add	r2, sp, #32
 800523a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800523e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005242:	e7f3      	b.n	800522c <__kernel_rem_pio2f+0x260>
 8005244:	a908      	add	r1, sp, #32
 8005246:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800524a:	3801      	subs	r0, #1
 800524c:	430a      	orrs	r2, r1
 800524e:	e7ab      	b.n	80051a8 <__kernel_rem_pio2f+0x1dc>
 8005250:	3201      	adds	r2, #1
 8005252:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005256:	2e00      	cmp	r6, #0
 8005258:	d0fa      	beq.n	8005250 <__kernel_rem_pio2f+0x284>
 800525a:	9905      	ldr	r1, [sp, #20]
 800525c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005260:	eb0d 0001 	add.w	r0, sp, r1
 8005264:	18e6      	adds	r6, r4, r3
 8005266:	a91c      	add	r1, sp, #112	@ 0x70
 8005268:	f104 0c01 	add.w	ip, r4, #1
 800526c:	384c      	subs	r0, #76	@ 0x4c
 800526e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005272:	4422      	add	r2, r4
 8005274:	4562      	cmp	r2, ip
 8005276:	da04      	bge.n	8005282 <__kernel_rem_pio2f+0x2b6>
 8005278:	4614      	mov	r4, r2
 800527a:	e70e      	b.n	800509a <__kernel_rem_pio2f+0xce>
 800527c:	9804      	ldr	r0, [sp, #16]
 800527e:	2201      	movs	r2, #1
 8005280:	e7e7      	b.n	8005252 <__kernel_rem_pio2f+0x286>
 8005282:	9903      	ldr	r1, [sp, #12]
 8005284:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005288:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	ee07 1a90 	vmov	s15, r1
 8005292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005296:	2400      	movs	r4, #0
 8005298:	ece6 7a01 	vstmia	r6!, {s15}
 800529c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 80052a0:	46b1      	mov	r9, r6
 80052a2:	455c      	cmp	r4, fp
 80052a4:	dd04      	ble.n	80052b0 <__kernel_rem_pio2f+0x2e4>
 80052a6:	ece0 7a01 	vstmia	r0!, {s15}
 80052aa:	f10c 0c01 	add.w	ip, ip, #1
 80052ae:	e7e1      	b.n	8005274 <__kernel_rem_pio2f+0x2a8>
 80052b0:	ecfe 6a01 	vldmia	lr!, {s13}
 80052b4:	ed39 7a01 	vldmdb	r9!, {s14}
 80052b8:	3401      	adds	r4, #1
 80052ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80052be:	e7f0      	b.n	80052a2 <__kernel_rem_pio2f+0x2d6>
 80052c0:	08005b04 	.word	0x08005b04
 80052c4:	08005ad8 	.word	0x08005ad8
 80052c8:	43800000 	.word	0x43800000
 80052cc:	3b800000 	.word	0x3b800000
 80052d0:	00000000 	.word	0x00000000
 80052d4:	9b02      	ldr	r3, [sp, #8]
 80052d6:	eeb0 0a48 	vmov.f32	s0, s16
 80052da:	eba3 0008 	sub.w	r0, r3, r8
 80052de:	f000 f8e7 	bl	80054b0 <scalbnf>
 80052e2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80052c8 <__kernel_rem_pio2f+0x2fc>
 80052e6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	db19      	blt.n	8005324 <__kernel_rem_pio2f+0x358>
 80052f0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80052cc <__kernel_rem_pio2f+0x300>
 80052f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80052f8:	aa08      	add	r2, sp, #32
 80052fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fe:	3508      	adds	r5, #8
 8005300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005304:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005310:	ee10 3a10 	vmov	r3, s0
 8005314:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005318:	ee17 3a90 	vmov	r3, s15
 800531c:	3401      	adds	r4, #1
 800531e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005322:	e74c      	b.n	80051be <__kernel_rem_pio2f+0x1f2>
 8005324:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005328:	aa08      	add	r2, sp, #32
 800532a:	ee10 3a10 	vmov	r3, s0
 800532e:	e7f6      	b.n	800531e <__kernel_rem_pio2f+0x352>
 8005330:	a808      	add	r0, sp, #32
 8005332:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005336:	9001      	str	r0, [sp, #4]
 8005338:	ee07 0a90 	vmov	s15, r0
 800533c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005340:	3b01      	subs	r3, #1
 8005342:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005346:	ee20 0a07 	vmul.f32	s0, s0, s14
 800534a:	ed62 7a01 	vstmdb	r2!, {s15}
 800534e:	e743      	b.n	80051d8 <__kernel_rem_pio2f+0x20c>
 8005350:	ecfc 6a01 	vldmia	ip!, {s13}
 8005354:	ecb5 7a01 	vldmia	r5!, {s14}
 8005358:	eee6 7a87 	vfma.f32	s15, s13, s14
 800535c:	3001      	adds	r0, #1
 800535e:	4550      	cmp	r0, sl
 8005360:	dc01      	bgt.n	8005366 <__kernel_rem_pio2f+0x39a>
 8005362:	4282      	cmp	r2, r0
 8005364:	daf4      	bge.n	8005350 <__kernel_rem_pio2f+0x384>
 8005366:	a858      	add	r0, sp, #352	@ 0x160
 8005368:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800536c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005370:	3b01      	subs	r3, #1
 8005372:	e735      	b.n	80051e0 <__kernel_rem_pio2f+0x214>
 8005374:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005376:	2b02      	cmp	r3, #2
 8005378:	dc09      	bgt.n	800538e <__kernel_rem_pio2f+0x3c2>
 800537a:	2b00      	cmp	r3, #0
 800537c:	dc2b      	bgt.n	80053d6 <__kernel_rem_pio2f+0x40a>
 800537e:	d044      	beq.n	800540a <__kernel_rem_pio2f+0x43e>
 8005380:	f009 0007 	and.w	r0, r9, #7
 8005384:	b059      	add	sp, #356	@ 0x164
 8005386:	ecbd 8b04 	vpop	{d8-d9}
 800538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005390:	2b03      	cmp	r3, #3
 8005392:	d1f5      	bne.n	8005380 <__kernel_rem_pio2f+0x3b4>
 8005394:	aa30      	add	r2, sp, #192	@ 0xc0
 8005396:	1f0b      	subs	r3, r1, #4
 8005398:	4413      	add	r3, r2
 800539a:	461a      	mov	r2, r3
 800539c:	4620      	mov	r0, r4
 800539e:	2800      	cmp	r0, #0
 80053a0:	f1a2 0204 	sub.w	r2, r2, #4
 80053a4:	dc52      	bgt.n	800544c <__kernel_rem_pio2f+0x480>
 80053a6:	4622      	mov	r2, r4
 80053a8:	2a01      	cmp	r2, #1
 80053aa:	f1a3 0304 	sub.w	r3, r3, #4
 80053ae:	dc5d      	bgt.n	800546c <__kernel_rem_pio2f+0x4a0>
 80053b0:	ab30      	add	r3, sp, #192	@ 0xc0
 80053b2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 80053b6:	440b      	add	r3, r1
 80053b8:	2c01      	cmp	r4, #1
 80053ba:	dc67      	bgt.n	800548c <__kernel_rem_pio2f+0x4c0>
 80053bc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80053c0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	d167      	bne.n	8005498 <__kernel_rem_pio2f+0x4cc>
 80053c8:	edc7 6a00 	vstr	s13, [r7]
 80053cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80053d0:	edc7 7a02 	vstr	s15, [r7, #8]
 80053d4:	e7d4      	b.n	8005380 <__kernel_rem_pio2f+0x3b4>
 80053d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80053d8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 80053dc:	440b      	add	r3, r1
 80053de:	4622      	mov	r2, r4
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	da24      	bge.n	800542e <__kernel_rem_pio2f+0x462>
 80053e4:	b34e      	cbz	r6, 800543a <__kernel_rem_pio2f+0x46e>
 80053e6:	eef1 7a47 	vneg.f32	s15, s14
 80053ea:	edc7 7a00 	vstr	s15, [r7]
 80053ee:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80053f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053f6:	aa31      	add	r2, sp, #196	@ 0xc4
 80053f8:	2301      	movs	r3, #1
 80053fa:	429c      	cmp	r4, r3
 80053fc:	da20      	bge.n	8005440 <__kernel_rem_pio2f+0x474>
 80053fe:	b10e      	cbz	r6, 8005404 <__kernel_rem_pio2f+0x438>
 8005400:	eef1 7a67 	vneg.f32	s15, s15
 8005404:	edc7 7a01 	vstr	s15, [r7, #4]
 8005408:	e7ba      	b.n	8005380 <__kernel_rem_pio2f+0x3b4>
 800540a:	ab30      	add	r3, sp, #192	@ 0xc0
 800540c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80052d0 <__kernel_rem_pio2f+0x304>
 8005410:	440b      	add	r3, r1
 8005412:	2c00      	cmp	r4, #0
 8005414:	da05      	bge.n	8005422 <__kernel_rem_pio2f+0x456>
 8005416:	b10e      	cbz	r6, 800541c <__kernel_rem_pio2f+0x450>
 8005418:	eef1 7a67 	vneg.f32	s15, s15
 800541c:	edc7 7a00 	vstr	s15, [r7]
 8005420:	e7ae      	b.n	8005380 <__kernel_rem_pio2f+0x3b4>
 8005422:	ed33 7a01 	vldmdb	r3!, {s14}
 8005426:	3c01      	subs	r4, #1
 8005428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800542c:	e7f1      	b.n	8005412 <__kernel_rem_pio2f+0x446>
 800542e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005432:	3a01      	subs	r2, #1
 8005434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005438:	e7d2      	b.n	80053e0 <__kernel_rem_pio2f+0x414>
 800543a:	eef0 7a47 	vmov.f32	s15, s14
 800543e:	e7d4      	b.n	80053ea <__kernel_rem_pio2f+0x41e>
 8005440:	ecb2 7a01 	vldmia	r2!, {s14}
 8005444:	3301      	adds	r3, #1
 8005446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800544a:	e7d6      	b.n	80053fa <__kernel_rem_pio2f+0x42e>
 800544c:	edd2 7a00 	vldr	s15, [r2]
 8005450:	edd2 6a01 	vldr	s13, [r2, #4]
 8005454:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005458:	3801      	subs	r0, #1
 800545a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800545e:	ed82 7a00 	vstr	s14, [r2]
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	edc2 7a01 	vstr	s15, [r2, #4]
 800546a:	e798      	b.n	800539e <__kernel_rem_pio2f+0x3d2>
 800546c:	edd3 7a00 	vldr	s15, [r3]
 8005470:	edd3 6a01 	vldr	s13, [r3, #4]
 8005474:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005478:	3a01      	subs	r2, #1
 800547a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800547e:	ed83 7a00 	vstr	s14, [r3]
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	edc3 7a01 	vstr	s15, [r3, #4]
 800548a:	e78d      	b.n	80053a8 <__kernel_rem_pio2f+0x3dc>
 800548c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005490:	3c01      	subs	r4, #1
 8005492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005496:	e78f      	b.n	80053b8 <__kernel_rem_pio2f+0x3ec>
 8005498:	eef1 6a66 	vneg.f32	s13, s13
 800549c:	eeb1 7a47 	vneg.f32	s14, s14
 80054a0:	edc7 6a00 	vstr	s13, [r7]
 80054a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80054a8:	eef1 7a67 	vneg.f32	s15, s15
 80054ac:	e790      	b.n	80053d0 <__kernel_rem_pio2f+0x404>
 80054ae:	bf00      	nop

080054b0 <scalbnf>:
 80054b0:	ee10 3a10 	vmov	r3, s0
 80054b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80054b8:	d02b      	beq.n	8005512 <scalbnf+0x62>
 80054ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80054be:	d302      	bcc.n	80054c6 <scalbnf+0x16>
 80054c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80054c4:	4770      	bx	lr
 80054c6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80054ca:	d123      	bne.n	8005514 <scalbnf+0x64>
 80054cc:	4b24      	ldr	r3, [pc, #144]	@ (8005560 <scalbnf+0xb0>)
 80054ce:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005564 <scalbnf+0xb4>
 80054d2:	4298      	cmp	r0, r3
 80054d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054d8:	db17      	blt.n	800550a <scalbnf+0x5a>
 80054da:	ee10 3a10 	vmov	r3, s0
 80054de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80054e2:	3a19      	subs	r2, #25
 80054e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80054e8:	4288      	cmp	r0, r1
 80054ea:	dd15      	ble.n	8005518 <scalbnf+0x68>
 80054ec:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005568 <scalbnf+0xb8>
 80054f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800556c <scalbnf+0xbc>
 80054f4:	ee10 3a10 	vmov	r3, s0
 80054f8:	eeb0 7a67 	vmov.f32	s14, s15
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfb8      	it	lt
 8005500:	eef0 7a66 	vmovlt.f32	s15, s13
 8005504:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005508:	4770      	bx	lr
 800550a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005570 <scalbnf+0xc0>
 800550e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005512:	4770      	bx	lr
 8005514:	0dd2      	lsrs	r2, r2, #23
 8005516:	e7e5      	b.n	80054e4 <scalbnf+0x34>
 8005518:	4410      	add	r0, r2
 800551a:	28fe      	cmp	r0, #254	@ 0xfe
 800551c:	dce6      	bgt.n	80054ec <scalbnf+0x3c>
 800551e:	2800      	cmp	r0, #0
 8005520:	dd06      	ble.n	8005530 <scalbnf+0x80>
 8005522:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005526:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800552a:	ee00 3a10 	vmov	s0, r3
 800552e:	4770      	bx	lr
 8005530:	f110 0f16 	cmn.w	r0, #22
 8005534:	da09      	bge.n	800554a <scalbnf+0x9a>
 8005536:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005570 <scalbnf+0xc0>
 800553a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005574 <scalbnf+0xc4>
 800553e:	ee10 3a10 	vmov	r3, s0
 8005542:	eeb0 7a67 	vmov.f32	s14, s15
 8005546:	2b00      	cmp	r3, #0
 8005548:	e7d9      	b.n	80054fe <scalbnf+0x4e>
 800554a:	3019      	adds	r0, #25
 800554c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005550:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005554:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005578 <scalbnf+0xc8>
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	e7d7      	b.n	800550e <scalbnf+0x5e>
 800555e:	bf00      	nop
 8005560:	ffff3cb0 	.word	0xffff3cb0
 8005564:	4c000000 	.word	0x4c000000
 8005568:	7149f2ca 	.word	0x7149f2ca
 800556c:	f149f2ca 	.word	0xf149f2ca
 8005570:	0da24260 	.word	0x0da24260
 8005574:	8da24260 	.word	0x8da24260
 8005578:	33000000 	.word	0x33000000

0800557c <floorf>:
 800557c:	ee10 3a10 	vmov	r3, s0
 8005580:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005584:	3a7f      	subs	r2, #127	@ 0x7f
 8005586:	2a16      	cmp	r2, #22
 8005588:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800558c:	dc2b      	bgt.n	80055e6 <floorf+0x6a>
 800558e:	2a00      	cmp	r2, #0
 8005590:	da12      	bge.n	80055b8 <floorf+0x3c>
 8005592:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80055f8 <floorf+0x7c>
 8005596:	ee30 0a27 	vadd.f32	s0, s0, s15
 800559a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a2:	dd06      	ble.n	80055b2 <floorf+0x36>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da24      	bge.n	80055f2 <floorf+0x76>
 80055a8:	2900      	cmp	r1, #0
 80055aa:	4b14      	ldr	r3, [pc, #80]	@ (80055fc <floorf+0x80>)
 80055ac:	bf08      	it	eq
 80055ae:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80055b2:	ee00 3a10 	vmov	s0, r3
 80055b6:	4770      	bx	lr
 80055b8:	4911      	ldr	r1, [pc, #68]	@ (8005600 <floorf+0x84>)
 80055ba:	4111      	asrs	r1, r2
 80055bc:	420b      	tst	r3, r1
 80055be:	d0fa      	beq.n	80055b6 <floorf+0x3a>
 80055c0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80055f8 <floorf+0x7c>
 80055c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80055c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	ddef      	ble.n	80055b2 <floorf+0x36>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbe      	ittt	lt
 80055d6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80055da:	fa40 f202 	asrlt.w	r2, r0, r2
 80055de:	189b      	addlt	r3, r3, r2
 80055e0:	ea23 0301 	bic.w	r3, r3, r1
 80055e4:	e7e5      	b.n	80055b2 <floorf+0x36>
 80055e6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80055ea:	d3e4      	bcc.n	80055b6 <floorf+0x3a>
 80055ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80055f0:	4770      	bx	lr
 80055f2:	2300      	movs	r3, #0
 80055f4:	e7dd      	b.n	80055b2 <floorf+0x36>
 80055f6:	bf00      	nop
 80055f8:	7149f2ca 	.word	0x7149f2ca
 80055fc:	bf800000 	.word	0xbf800000
 8005600:	007fffff 	.word	0x007fffff

08005604 <_init>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr

08005610 <_fini>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr
